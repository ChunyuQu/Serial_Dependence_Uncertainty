<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001', 'sex': '', 'age': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['dots.js']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="True" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1707, 960]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Serial_Dependence_U" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="ITI">
      <RoutineSettingsComponent name="ITI" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="ITI" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_9" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_9" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="M1">
      <RoutineSettingsComponent name="M1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="M1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.5,-0.5,-0.5]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="Fixation_1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="Fixation_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.01, 0.01)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="Mask" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;&amp;#10;  // 初始化 RDK&amp;#10;  window.rdk = new RDK({&amp;#10;    canvasId: &quot;canvas&quot;,&amp;#10;    type: &quot;keypress&quot;, &amp;#10;    direction: 0.5,  // 可替换为变量&amp;#10;    coherence: 0.5, // 可替换为变量&amp;#10;    dotColor: &quot;rgb(7, 193, 7)&quot;,  &amp;#10;    nDots: 300,&amp;#10;    speed: 1.5,&amp;#10;    dotSize: 2,&amp;#10;  });&amp;#10;}&amp;#10;// 记录开始时间和持续时长&amp;#10;window.rdkStart = performance.now();&amp;#10;window.rdkDuration = parseFloat(TimeDur) * 1000;  // 转成毫秒&amp;#10;window.rdkRunning = true;&amp;#10;&amp;#10;console.log(&quot;✅ M1阶段 RDK 初始化完成，TimeDur =&quot;, TimeDur, &quot;秒&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;&amp;#10;  // 初始化 RDK&amp;#10;  window.rdk = new RDK({&amp;#10;    canvasId: &quot;canvas&quot;,&amp;#10;    direction: 0,  // 可替换为变量&amp;#10;    coherence: 0.5, // 可替换为变量&amp;#10;    nDots: 300,&amp;#10;    speed: 1.5,&amp;#10;    dotSize: 2,&amp;#10;  });&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="&amp;#10;if (window.rdkRunning &amp;&amp; window.rdk) {&amp;#10;  // 每帧更新 RDK&amp;#10;  window.rdk.updateAndDraw();&amp;#10;&amp;#10;  // 检查是否达到 TimeDur 秒&amp;#10;  const elapsed = performance.now() - window.rdkStart;&amp;#10;  if (elapsed &gt;= window.rdkDuration) {&amp;#10;    window.rdkRunning = false;&amp;#10;    continueRoutine = false;&amp;#10;    console.log(`⏱ TimeDur 达成，本轮停止，已运行 ${(elapsed / 1000).toFixed(3)} 秒`);&amp;#10;  }&amp;#10;} else {&amp;#10;  // fallback: 若 RDK 没有初始化成功&amp;#10;  console.warn(&quot;⚠️ RDK 尚未初始化或已停止运行！&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;}&amp;#10;window.rdk = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Mask" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="D">
      <RoutineSettingsComponent name="D" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="D" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <DotsComponent name="dots" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="1" valType="code" updates="constant" name="coherence"/>
        <Param val="-1.0000, 0.0039, -1.0000" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="90" valType="code" updates="constant" name="dir"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="0" valType="code" updates="None" name="dotLife"/>
        <Param val="5" valType="code" updates="constant" name="dotSize"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="(0.0, 0.0)" valType="list" updates="constant" name="fieldPos"/>
        <Param val="circle" valType="str" updates="constant" name="fieldShape"/>
        <Param val="30" valType="code" updates="constant" name="fieldSize"/>
        <Param val="300" valType="code" updates="constant" name="nDots"/>
        <Param val="dots" valType="code" updates="None" name="name"/>
        <Param val="walk" valType="str" updates="None" name="noiseDots"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="repeat" valType="str" updates="None" name="refreshDots"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="same" valType="str" updates="None" name="signalDots"/>
        <Param val="0.035" valType="code" updates="constant" name="speed"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </DotsComponent>
      <PolygonComponent name="Fixation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="Fixation" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.01, 0.01)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="Response">
      <RoutineSettingsComponent name="Response" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="Direction_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="window.keyDuration_global = 9999;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// ========== 初始化参数 ==========&amp;#10;let direction = window.trial_direction;&amp;#10;let coherence = parseFloat(Coherence1);&amp;#10;let totalDots = 360;&amp;#10;let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;let fps = 60;&amp;#10;let speed = (1.5 * cm_to_px_x) / fps;&amp;#10;console.log(&quot;✅ 读取到的方向是：&quot;, direction); &amp;#10;console.log(&quot;✅ 读取到的coherence是：&quot;, coherence); &amp;#10;// 如果是 undefined，说明设置失败&amp;#10;// ========== 初始化状态变量 ==========&amp;#10;window.keyPressed = false;&amp;#10;window.keyReleased = false;&amp;#10;window.pressStart = null;&amp;#10;window.releaseTime = null;&amp;#10;window.keyDuration = 9999;&amp;#10;&amp;#10;// ========== 创建 canvas ==========&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;}&amp;#10;&amp;#10;// ========== 初始化 RDK ==========&amp;#10;window.rdk = new RDK({&amp;#10;  canvasId: &quot;canvas&quot;,&amp;#10;  direction: direction,&amp;#10;  coherence: coherence,&amp;#10;  nDots: totalDots,&amp;#10;  dotColor: &quot;white&quot;,&amp;#10;  speed: 0,&amp;#10;  dotSize: 0.03 * cm_to_px_x,&amp;#10;  fieldRadius: 3.5 * cm_to_px_x,&amp;#10;  noiseMode: &quot;inertial&quot;,&amp;#10;  x_scale: x_scale,&amp;#10;  y_scale: y_scale&amp;#10;});&amp;#10;window.rdk.setSignalDots(coherence);&amp;#10;window.rdkStart = performance.now();&amp;#10;window.rdkDuration = 6000;&amp;#10;window.rdkRunning = true;&amp;#10;&amp;#10;// ========== 键盘事件绑定 ==========&amp;#10;window.keyDownHandler = function (event) {&amp;#10;  if (event.key === &quot;ArrowDown&quot; &amp;&amp; !window.keyPressed) {&amp;#10;    window.keyPressed = true;&amp;#10;    window.pressStart = performance.now();&amp;#10;    window.rdk.speed = speed;&amp;#10;    console.log(&quot;⬇️ 按下 ↓ 键，RDK 开始运动&quot;);&amp;#10;  }&amp;#10;};&amp;#10;&amp;#10;&amp;#10;window.keyUpHandler = function (event) {&amp;#10;  if (event.key === &quot;ArrowDown&quot; &amp;&amp; window.keyPressed &amp;&amp; !window.keyReleased) {&amp;#10;    window.keyReleased = true;&amp;#10;    window.releaseTime = performance.now();&amp;#10;    window.keyDuration = window.releaseTime - window.pressStart;&amp;#10;    window.rdk.speed = speed;&amp;#10;    window.rdk.direction =direction;&amp;#10;    window.rdk.coherence =coherence;&amp;#10;    console.log(&quot;🔴 松开 ↓ 键，keyDuration =&quot;, window.keyDuration.toFixed(2), &quot;ms&quot;);&amp;#10;    console.log(&quot;✅ 读取到的方向是：&quot;, direction); &amp;#10;console.log(&quot;✅ 读取到的coherence是：&quot;, coherence); &amp;#10;  }&amp;#10;};&amp;#10;&amp;#10;&amp;#10;window.addEventListener(&quot;keydown&quot;, window.keyDownHandler);&amp;#10;window.addEventListener(&quot;keyup&quot;, window.keyUpHandler);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;&amp;#10;  // 初始化 RDK&amp;#10;  window.rdk = new RDK({&amp;#10;    canvasId: &quot;canvas&quot;,&amp;#10;    direction: 0,  // 可替换为变量&amp;#10;    coherence: 0.5, // 可替换为变量&amp;#10;    nDots: 300,&amp;#10;    speed: 1.5,&amp;#10;    dotSize: 2,&amp;#10;  });&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// 1. 每帧绘制 RDK&amp;#10;if (window.rdk &amp;&amp; window.rdkRunning) {&amp;#10;  window.rdk.updateAndDraw(true);&amp;#10;}&amp;#10;&amp;#10;// 2. 获取当前运行时间&amp;#10;const elapsed = performance.now() - window.rdkStart;&amp;#10;&amp;#10;// 3. 判断是否松开键，或者超时（自动结束）&amp;#10;if (window.keyReleased || elapsed &gt;= window.rdkDuration) {&amp;#10;  if (!window.keyReleased) {&amp;#10;    window.keyDuration = 9999;  // 没按键则为默认值&amp;#10;    if (window.rdk) window.rdk.speed = 0;&amp;#10;  }&amp;#10;  window.rdkRunning = false;&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;keyDuration&quot;,  window.keyDuration.toFixed(2));&amp;#10;&amp;#10;// 清除画布&amp;#10;if (window.rdkCanvas) {&amp;#10;  const ctx = window.rdkCanvas.getContext(&quot;2d&quot;);&amp;#10;  ctx.clearRect(0, 0, window.rdkCanvas.width, window.rdkCanvas.height);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="Direction_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="BKG_4" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="code_5" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="window.keyDuration_global = 9999;&amp;#10;function ensureCanvasReady() {&amp;#10;  if (!window.rdkCanvas) {&amp;#10;    const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;    canvas.id = &quot;canvas&quot;;&amp;#10;    canvas.width = psychoJS.window.size[0];&amp;#10;    canvas.height = psychoJS.window.size[1];&amp;#10;    canvas.style.position = &quot;absolute&quot;;&amp;#10;    canvas.style.top = &quot;0&quot;;&amp;#10;    canvas.style.left = &quot;0&quot;;&amp;#10;    canvas.style.zIndex = &quot;10&quot;;&amp;#10;    canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;    document.getElementById(&quot;root&quot;).appendChild(canvas);&amp;#10;    window.rdkCanvas = canvas;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// ========== 1. 初始化关键参数 ==========&amp;#10;let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;let fieldRadius = 3.5 * cm_to_px_x;&amp;#10;let fieldCenterX = window.innerWidth / 2;&amp;#10;let fieldCenterY = window.innerHeight / 2;&amp;#10;let dotRadius = 0.03 * cm_to_px_x;&amp;#10;let dotSpeed = 1.75 * cm_to_px_x;&amp;#10;let direction = trial_direction * Math.PI / 180;&amp;#10;let coh = 0;&amp;#10;let numDots = 360;&amp;#10;&amp;#10;// 保存给其他阶段用&amp;#10;window.fieldRadius = fieldRadius;&amp;#10;window.fieldCenterX = fieldCenterX;&amp;#10;window.fieldCenterY = fieldCenterY;&amp;#10;window.dotSpeed = dotSpeed;&amp;#10;&amp;#10;// ========== 2. 创建 dot 阵列（reproduction 专用） ==========&amp;#10;window.reproDots = [];&amp;#10;for (let i = 0; i &lt; numDots; i++) {&amp;#10;  const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;  const a = Math.random() * 2 * Math.PI;&amp;#10;  const x = fieldCenterX + r * Math.cos(a);&amp;#10;  const y = fieldCenterY + r * Math.sin(a);&amp;#10;  const dot = new Dot(x, y, dotRadius, 0, direction);  // 初始速度为0&amp;#10;  window.reproDots.push(dot);&amp;#10;}&amp;#10;window.keyPressed = false;&amp;#10;window.keyReleased = false;&amp;#10;window.pressStart = null;&amp;#10;window.releaseTime = null;&amp;#10;window.reproducedDuration = null;&amp;#10;&amp;#10;window.addEventListener(&quot;keydown&quot;, function (event) {&amp;#10;  if (event.key === &quot;ArrowDown&quot; &amp;&amp; !window.keyPressed) {&amp;#10;    window.keyPressed = true;&amp;#10;    window.pressStart = performance.now();&amp;#10;&amp;#10;    // 启动所有 dot 的速度&amp;#10;    for (let dot of window.reproDots) {&amp;#10;      dot.speed = window.dotSpeed;&amp;#10;    }&amp;#10;&amp;#10;    console.log(&quot;⬇️ 再现开始&quot;);&amp;#10;  }&amp;#10;});&amp;#10;&amp;#10;window.addEventListener(&quot;keyup&quot;, function (event) {&amp;#10;  if (event.key === &quot;ArrowDown&quot; &amp;&amp; window.keyPressed &amp;&amp; !window.keyReleased) {&amp;#10;    window.keyReleased = true;&amp;#10;    window.releaseTime = performance.now();&amp;#10;    window.reproducedDuration = window.releaseTime - window.pressStart;&amp;#10;&amp;#10;    // 停止 dot&amp;#10;    for (let dot of window.reproDots) {&amp;#10;      dot.speed = 0;&amp;#10;    }&amp;#10;&amp;#10;    console.log(&quot;🔴 再现结束，时长 =&quot;, window.reproducedDuration.toFixed(0), &quot;ms&quot;);&amp;#10;    continueRoutine = false;&amp;#10;  }&amp;#10;});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="ensureCanvasReady();&amp;#10;const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;let coh = 0;//parseFloat(Coherence1)&amp;#10;const ctx = window.rdkCanvas.getContext(&quot;2d&quot;);&amp;#10;&amp;#10;ctx.clearRect(0, 0, window.rdkCanvas.width, window.rdkCanvas.height);&amp;#10;&amp;#10;const dt = 1 / 60;&amp;#10;for (let dot of window.reproDots) {&amp;#10;  const mode = (Math.random() &lt; coh) ? &quot;coherent&quot; : &quot;random&quot;;&amp;#10;  dot.updateDirection(dt, mode, coh);  // 你原有的 dot 方法&amp;#10;  dot.draw(ctx);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;keyDuration&quot;,  window.reproducedDuration.toFixed(0));&amp;#10;window.keyDuration = window.reproducedDuration.toFixed(0);&amp;#10;// 清除画布&amp;#10;if (window.rdkCanvas) {&amp;#10;  const ctx = window.rdkCanvas.getContext(&quot;2d&quot;);&amp;#10;  ctx.clearRect(0, 0, window.rdkCanvas.width, window.rdkCanvas.height);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Cue">
      <RoutineSettingsComponent name="Cue" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Cue" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_8" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_8" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="T" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Intro">
      <RoutineSettingsComponent name="Intro" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Intro" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="Ins_image_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="instr.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="Ins_image_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.5, 2)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_2" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Mask_2">
      <RoutineSettingsComponent name="Mask_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Mask_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_6" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_6" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="Fixation_4" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="Fixation_4" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.01, 0.01)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="Direction_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// ========== 参数定义 ==========&amp;#10;const fps = 60;&amp;#10;let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;let cm_to_px_y = psychoJS.window.size[1] * y_scale;&amp;#10;let speed = (1.75 * cm_to_px_x) / fps;&amp;#10;let direction = window.trial_direction  &amp;#10;console.log(`📏 帧率=${fps} Hz，速度=${speed.toFixed(2)} px/frame`);&amp;#10;console.log(&quot;🔍 当前 x_scale =&quot;, x_scale); &amp;#10;&amp;#10;// ========== 创建 Canvas ==========&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;}&amp;#10;&amp;#10;// ========== 初始化纯噪声 RDK ==========&amp;#10;window.rdk = new RDK({&amp;#10;  canvasId: &quot;canvas&quot;,&amp;#10;  type: &quot;mask&quot;,               // 遮罩类型（非按键模式）&amp;#10;  noiseMode: &quot;walk&quot;,          // 每帧都换方向&amp;#10;  direction: 0,               // 无效方向（因为 coherence = 0）&amp;#10;  coherence: 0,               // ✅ 纯噪声&amp;#10;  nDots: 360,&amp;#10;  speed: speed,&amp;#10;  dotSize: 0.03 * cm_to_px_x,&amp;#10;  fieldRadius: 3.5 * cm_to_px_x,&amp;#10;  dotColor: &quot;white&quot;&amp;#10;});&amp;#10;&amp;#10;// ========== 启动标志 ==========&amp;#10;window.rdkStart = performance.now();&amp;#10;window.rdkDuration = 500;  // 0.6 秒&amp;#10;window.rdkRunning = true;&amp;#10;&amp;#10;console.log(&quot;✅ RDK mask：纯噪声，持续 0.5 秒&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;&amp;#10;  // 初始化 RDK&amp;#10;  window.rdk = new RDK({&amp;#10;    canvasId: &quot;canvas&quot;,&amp;#10;    direction: 0,  // 可替换为变量&amp;#10;    coherence: 0.5, // 可替换为变量&amp;#10;    nDots: 300,&amp;#10;    speed: 1.5,&amp;#10;    dotSize: 2,&amp;#10;  });&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="&amp;#10;if (window.rdkRunning &amp;&amp; window.rdk) {&amp;#10;  // 每帧更新 RDK&amp;#10;  window.rdk.updateAndDraw();&amp;#10;&amp;#10;  // 检查是否达到 TimeDur 秒&amp;#10;  const elapsed = performance.now() - window.rdkStart;&amp;#10;  if (elapsed &gt;= window.rdkDuration) {&amp;#10;    window.rdkRunning = false;&amp;#10;    continueRoutine = false;&amp;#10;    console.log(`⏱ TimeDur 达成，本轮停止，已运行 ${(elapsed / 1000).toFixed(3)} 秒`);&amp;#10;  }&amp;#10;} else {&amp;#10;  // fallback: 若 RDK 没有初始化成功&amp;#10;  console.warn(&quot;⚠️ RDK 尚未初始化或已停止运行！&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Direction_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Feedback_Time">
      <RoutineSettingsComponent name="Feedback_Time" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Feedback_Time" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_7" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_7" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="Initial_Feedback_code_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="let cm_to_px_x = psychoJS.window.size[0] * x_scale;  // 每 cm 多少 px&amp;#10;let cm_to_px_y = psychoJS.window.size[1] * y_scale;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Initial_Feedback_code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="Feedback_code_5" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="PresentDur = 0.5&amp;#10;&amp;#10;color_1 = [1,1,1];&amp;#10;color_2 = [1,1,1];&amp;#10;color_3 = [1,1,1];&amp;#10;color_4 = [1,1,1];&amp;#10;color_5 = [1,1,1];" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// === 初始化 ===&amp;#10;PresentDur = 0.5;&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;&amp;#10;// 初始化所有圆为白色&amp;#10;color_1 = [1, 1, 1];&amp;#10;color_2 = [1, 1, 1];&amp;#10;color_3 = [1, 1, 1];&amp;#10;color_4 = [1, 1, 1];&amp;#10;color_5 = [1, 1, 1];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// 获取响应时间（ms）与目标时间（s）&amp;#10;let timeResp = window.keyDuration;&amp;#10;let timeTarget = parseFloat(TimeDur);&amp;#10;&amp;#10;let feedbackID = 0;&amp;#10;// 如果是实验阶段，则跳过整个反馈 routine&amp;#10;if (typeof window.Block_id !== 'undefined' &amp;&amp; window.Block_id &gt;= window.Practice_num) {&amp;#10;    continueRoutine = false;&amp;#10;    console.log(&quot;⏭️ 实验阶段跳过反馈：Block_id = &quot; + window.Block_id);&amp;#10;} else {&amp;#10;    console.log(&quot;✅ 练习阶段显示反馈：Block_id = &quot; + window.Block_id);&amp;#10;}&amp;#10;&amp;#10;if (TrialType === &quot;Time&quot; &amp;&amp; timeResp !== 9999) {&amp;#10;    let timeRespSec = timeResp / 1000;&amp;#10;    let diff = timeRespSec - timeTarget;&amp;#10;    let relErr = Math.abs(diff) / timeTarget;&amp;#10;&amp;#10;    if (relErr &lt;= 0.05) {&amp;#10;        feedbackID = 3; color_3 = [0, 0.9, 0.3];    // ✅ 正确 ±5%&amp;#10;    } else if (-diff / timeTarget &gt;= 0.3) {&amp;#10;        feedbackID = 1; color_1 = [1, 0, 0];        // ❌ 过早 ≥30%&amp;#10;    } else if (diff / timeTarget &gt;= 0.3) {&amp;#10;        feedbackID = 5; color_5 = [1, 0, 0];        // ❌ 过晚 ≥30%&amp;#10;    } else if (diff / timeTarget &gt;= 0.05) {&amp;#10;        feedbackID = 4; color_4 = [1, 0.3, 0.4];    // ⚠ 稍晚&amp;#10;    } else if (-diff / timeTarget &gt;= 0.05) {&amp;#10;        feedbackID = 2; color_2 = [1, 0.3, 0.4];    // ⚠ 稍早&amp;#10;    }&amp;#10;&amp;#10;    console.log(`🧠 Feedback 判定: Resp=${timeRespSec.toFixed(2)}s | Target=${timeTarget}s | relErr=${relErr.toFixed(3)} | ID=${feedbackID}`);&amp;#10;} else {&amp;#10;    feedbackID = 0;  // 没有松键&amp;#10;    console.log(&quot;⚠️ 未松键，反馈 ID = 0&quot;);&amp;#10;}&amp;#10;&amp;#10;// 写入 feedbackID&amp;#10;psychoJS.experiment.addData(&quot;FeedbackID_T&quot;, feedbackID);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="PresentDur = 0.5&amp;#10;&amp;#10;win.mouseVisible = False&amp;#10;FeedbackDuration = keyDuration&amp;#10;if TrialType == 'Time':&amp;#10;    if Key_release == 1:&amp;#10;        if abs(float(TimeDur)-float(FeedbackDuration))/float(TimeDur)&lt;= 0.05:&amp;#10;           color_3 = [0,0.9,0.3]; &amp;#10;           thisExp.addData('FeedbackID_T', 3)&amp;#10;           &amp;#10;        elif (float(TimeDur)-float(FeedbackDuration))/float(TimeDur)&gt;=0.3:&amp;#10;            color_1 = [1,0,0];&amp;#10;            thisExp.addData('FeedbackID_T', 1)&amp;#10;&amp;#10;        elif (float(FeedbackDuration)-float(TimeDur))/float(TimeDur)&gt;=0.3:&amp;#10;            color_5 = [1,0,0];&amp;#10;            thisExp.addData('FeedbackID_T', 5)&amp;#10;&amp;#10;        elif ((float(FeedbackDuration)-float(TimeDur))/float(TimeDur)&gt;=0.05) and ((float(FeedbackDuration)-float(TimeDur))/float(TimeDur)&lt;=0.3) :&amp;#10;            color_4 = [1,0.3,0.4];&amp;#10;            thisExp.addData('FeedbackID_T', 4)&amp;#10;&amp;#10;        elif ((float(TimeDur)-float(FeedbackDuration))/float(TimeDur)&gt;=0.05) and ((float(TimeDur)-float(FeedbackDuration))/float(TimeDur)&lt;=0.3) :&amp;#10;            color_2 = [1,0.3,0.4];&amp;#10;            thisExp.addData('FeedbackID_T', 2)&amp;#10;    else:&amp;#10;        thisExp.addData('FeedbackID_T', 0)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="keyDuration = 10;&amp;#10;Key_pressed = false;&amp;#10;Key_release = false;&amp;#10;color_1 = [1, 1, 1];&amp;#10;color_2 = [1, 1, 1];&amp;#10;color_3 = [1, 1, 1];&amp;#10;color_4 = [1, 1, 1];&amp;#10;color_5 = [1, 1, 1];&amp;#10;&amp;#10;psychoJS.eventManager.clearEvents({&quot;eventType&quot;: &quot;keyboard&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="keyDuration = 10&amp;#10;Key_pressed = False # need an initial value&amp;#10;Key_release == 0&amp;#10;&amp;#10;color_1 = [1,1,1];&amp;#10;color_2 = [1,1,1];&amp;#10;color_3 = [1,1,1];&amp;#10;color_4 = [1,1,1];&amp;#10;color_5 = [1,1,1];&amp;#10;kb.clock.reset()  # now t=0&amp;#10;&amp;#10;kb.clearEvents(eventType='keyboard')&amp;#10;event.clearEvents(eventType='keyboard')" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Feedback_code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="feedback_1_T" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color_1" valType="str" updates="set every repeat" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color_1" valType="str" updates="set every repeat" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0.5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="3600" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_1_T" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-8*x_scale, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(2*x_scale, 2*x_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$PresentDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_2_T" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color_2" valType="str" updates="set every repeat" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color_2" valType="str" updates="set every repeat" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0.5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="3600" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_2_T" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-4*x_scale, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(2*x_scale, 2*x_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$PresentDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_3_T" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color_3" valType="str" updates="set every repeat" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color_3" valType="str" updates="set every repeat" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0.5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="3600" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_3_T" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(2*x_scale, 2*x_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$PresentDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_4_T" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color_4" valType="str" updates="set every repeat" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color_4" valType="str" updates="set every repeat" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0.5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="3600" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_4_T" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(4*x_scale, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(2*x_scale, 2*x_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$PresentDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="feedback_5_T" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color_5" valType="str" updates="set every repeat" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color_5" valType="str" updates="set every repeat" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="0.5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="3600" valType="int" updates="constant" name="nVertices"/>
        <Param val="feedback_5_T" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(8*x_scale, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(2*x_scale, 2*x_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$PresentDur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="block">
      <RoutineSettingsComponent name="block" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="block" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="Block_code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="Block_text=' '&amp;#10;Block_id = 0&amp;#10;Block_num = 1&amp;#10;Block_trial = 2&amp;#10;Practice_num = 54-1 # start from 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;// 替代 Block_trial 的定义&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;&amp;#10;let direction = Math.floor(Math.random() * 360);  // 或者读取条件生成的方向&amp;#10;window.trial_direction = direction;               // ✔️ 保存到 window 对象上&amp;#10;psychoJS.experiment.addData(&quot;direction&quot;, direction);&amp;#10;&amp;#10;// 参数设定&amp;#10;const blockSize = 30;&amp;#10;const Practice_num = 1;&amp;#10;const Block_num = Math.ceil(trials.nTotal / blockSize);&amp;#10;&amp;#10;&amp;#10;// 当前全局 trial 编号&amp;#10;let trialNumber = trials.thisN;  // ✅ 是当前 loop 中真实的执行顺序&amp;#10;&amp;#10;&amp;#10;// 当前 block ID（从 0 开始），当前 block 内的 trial index&amp;#10;let Block_id = Math.floor(trialNumber / blockSize);&amp;#10;let trial_in_block = trialNumber % blockSize;&amp;#10;window.Block_id = Block_id;&amp;#10;window.Practice_num = Practice_num;&amp;#10;window.feedbackID = feedbackID;&amp;#10;&amp;#10;// === 强制记录 Block_id，每轮 trial 都记录 ===&amp;#10;psychoJS.experiment.addData(&quot;Block_id&quot;, Block_id);&amp;#10;console.log(`📋 当前 trialNumber: ${trialNumber}, Block_id: ${Block_id}, trial_in_block: ${trial_in_block}`);&amp;#10;&amp;#10;// === 仅 block 起始 trial 设置提示语，否则跳过 block routine ===&amp;#10;if (trial_in_block === 0) {&amp;#10;    if (Block_id &lt; Practice_num) {&amp;#10;        Block_text = &quot; Practice will start. Please press 'S' to continue.&quot;;&amp;#10;    } else {&amp;#10;        Block_text = `Block (${Block_id - Practice_num + 1} / ${Block_num - Practice_num}) will start. Please press 'S' to continue.`;&amp;#10;    }&amp;#10;&amp;#10;    console.log(&quot;✅ BlockStart 提示语触发！&quot;);&amp;#10;    console.log(&quot;📝 Block_text =&quot;, Block_text);&amp;#10;} else {&amp;#10;    Block_text = &quot;false&quot;;  // 清空文字&amp;#10;    continueRoutine = false;  // ⛔ 跳过这个 block routine&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# practice start&amp;#10;win.mouseVisible = False&amp;#10;if trials.thisTrialN ==0:&amp;#10;    Block_text='Practice will start. '+' Please press s key to continue.'&amp;#10;    thisExp.addData('Block_exp', Block_id)&amp;#10;# not practice or block start, then don't show the info of block&amp;#10;elif trials.thisTrialN != Practice_num and trials.thisTrialN != Block_trial*Block_id+Practice_num:&amp;#10;    thisExp.addData('Block_exp', Block_id)&amp;#10;    continueRoutine = False&amp;#10;    &amp;#10;else:&amp;#10;    # all blocks finished.&amp;#10;    if Block_id == Block_num: &amp;#10;        thisExp.addData('Block_exp', Block_id)&amp;#10;        continueRoutine = False&amp;#10;    # each block start.&amp;#10;    else:&amp;#10;        thisExp.addData('Block_exp', Block_id)&amp;#10;        Block_id = Block_id+1&amp;#10;        Block_text='Block ('+ str(Block_id) +' / ' +str(Block_num) +  ') '+ ' will start. '+' Please press s key to continue.'&amp;#10;        " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData('trial_direction', window.trial_direction);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Block_code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Block_t_2" plugin="None">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.08" valType="code" updates="set every repeat" name="letterHeight"/>
        <Param val="Block_t_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0,0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Block_text" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1600" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Block_resp_2" plugin="None">
        <Param val="'s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Block_resp_2" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Scale_setup">
      <RoutineSettingsComponent name="Scale_setup" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Scale_setup" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="show_keys = 0&amp;#10;show_touch = 0&amp;#10;if expInfo['device type'] == 'Touch screen':&amp;#10;    show_touch = 1&amp;#10;else:&amp;#10;    show_keys = 1&amp;#10;&amp;#10;oldt=0&amp;#10;x_size=8.560&amp;#10;y_size=5.398&amp;#10;screen_height=0&amp;#10;&amp;#10;if win.units=='norm':&amp;#10;    x_scale=.05&amp;#10;    y_scale=.1&amp;#10;    dbase = .0001&amp;#10;    unittext=' norm units'&amp;#10;    vsize=2&amp;#10;elif win.units=='pix':&amp;#10;    x_scale=60&amp;#10;    y_scale=40&amp;#10;    dbase = .1&amp;#10;    unittext=' pixels'&amp;#10;    vsize=win.size[1]&amp;#10;else:&amp;#10;    x_scale=.05&amp;#10;    y_scale=.05&amp;#10;    dbase = .0001&amp;#10;    unittext=' height units'&amp;#10;    vsize=1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;document.body.style.cursor = &quot;none&quot;;&amp;#10;&amp;#10;show_keys = 0;&amp;#10;show_touch = 0;&amp;#10;if ((expInfo[&quot;device type&quot;] === &quot;Touch screen&quot;)) {&amp;#10;    show_touch = 1;&amp;#10;} else {&amp;#10;    show_keys = 1;&amp;#10;}&amp;#10;oldt = 0;&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;screen_height = 0;&amp;#10;if ((psychoJS.window.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((psychoJS.window.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;        vsize = psychoJS.window.size[1];&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="screen_scale_keys">
      <RoutineSettingsComponent name="screen_scale_keys" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="screen_scale_keys" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_scale" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;console.log(&quot;key start&quot;);&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;print('key start')&amp;#10;event.clearEvents()&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="keys=event.getKeys()&amp;#10;&amp;#10;if len(keys):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if 'space' in keys and t &gt; 1:&amp;#10;        continueRoutine=False&amp;#10;    elif 'up' in keys:&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif 'down' in keys:&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif 'left' in keys:&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif 'right' in keys:&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    text_bottom.text='X Scale = '+str(x_scale)+unittext+' per cm, Y Scale = '+str(y_scale)+unittext+' per cm\nScreen height = '+str(screen_height)+' cm\n\nPress the space bar when done'&amp;#10;    ccimage.size=[x_size*x_scale, y_size*y_scale]&amp;#10;    " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if ((_pj.in_es6(&quot;space&quot;, keys) &amp;&amp; (t &gt; 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;up&quot;, keys)) {&amp;#10;            y_scale = (util.round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;down&quot;, keys)) {&amp;#10;                y_scale = (util.round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;left&quot;, keys)) {&amp;#10;                    x_scale = (util.round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;right&quot;, keys)) {&amp;#10;                        x_scale = (util.round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (util.round(((vsize * 10) / y_scale)) / 10);&amp;#10;    text_bottom.text = ((((((((&quot;X Scale = &quot; + x_scale.toString()) + unittext) + &quot; per cm, Y Scale = &quot;) + y_scale.toString()) + unittext) + &quot; per cm\nScreen height = &quot;) + screen_height.toString()) + &quot; cm\n\nPress the space bar when done&quot;);&amp;#10;    ccimage.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#thisExp.addData('X Scale',x_scale)&amp;#10;#thisExp.addData('Y Scale',y_scale)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_scale" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_top" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_top" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, .7)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Resize this image to match the size of a credit card&amp;#10;Up arrow for taller&amp;#10;Down arrow for shorter&amp;#10;Left arrow for narrower&amp;#10;Right arrow for wider" valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_bottom" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_bottom" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -.6)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press the space bar when done" valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="ccimage" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="bank-1300155_640.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="ccimage" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$(x_size*x_scale, y_size*y_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="rectangel_keys">
      <RoutineSettingsComponent name="rectangel_keys" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="rectangel_keys" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="rectangle_text_keys" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="rectangle_text_keys" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -.8)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This shape should be a 10 cm square.&amp;#10;Component size  (10*x_scale, 10*y_scale) set every repeat.&amp;#10;Press space to continue." valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon_keys" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_keys" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(10*x_scale, 10*y_scale)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="key_resp_keys" plugin="None">
        <Param val="['space']" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_keys" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="console.log(&quot;🔍 当前 x_scale =&quot;, x_scale);  // ✅ 输出 x_scale 的值" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="console.log(&quot;🔍 当前 x_scale =&quot;, x_scale);  // ✅ 输出 x_scale 的值" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="screen_scale_touch">
      <RoutineSettingsComponent name="screen_scale_touch" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="screen_scale_touch" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_scale_touch" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.eventManager.clearEvents();&amp;#10;text_bottom_touch_text = &quot; &quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="event.clearEvents()&amp;#10;text_bottom_touch_text = ' '" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="click = mouse.clicked_name&amp;#10;&amp;#10;if len(click):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if mouse.isPressedIn(continue_button) and t &gt; 1:&amp;#10;        continueRoutine=False&amp;#10;    elif mouse.isPressedIn(tri_up):&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif mouse.isPressedIn(tri_down):&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif mouse.isPressedIn(tri_left):&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif mouse.isPressedIn(tri_right):&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    text_bottom_touch_text='X Scale = '+str(x_scale)+unittext+' per cm, Y Scale = '+str(y_scale)+unittext+' per cm\nScreen height = '+str(screen_height)+' cm'&amp;#10;    ccimage_touch.size=[x_size*x_scale, y_size*y_scale]&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="click = mouse.clicked_name;&amp;#10;if (click.length) {&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if ((mouse.isPressedIn(continue_button) &amp;&amp; (t &gt; 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (mouse.isPressedIn(tri_up)) {&amp;#10;            y_scale = (Math.round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (mouse.isPressedIn(tri_down)) {&amp;#10;                y_scale = (Math.round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (mouse.isPressedIn(tri_left)) {&amp;#10;                    x_scale = (Math.round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (mouse.isPressedIn(tri_right)) {&amp;#10;                        x_scale = (Math.round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (Math.round(((vsize * 10) / y_scale)) / 10);&amp;#10;    text_bottom_touch_text = ((((((((&quot;X Scale = &quot; + x_scale.toString()) + unittext) + &quot; per cm, Y Scale = &quot;) + y_scale.toString()) + unittext) + &quot; per cm\nScreen height = &quot;) + screen_height.toString()) + &quot; cm&quot;);&amp;#10;    ccimage_touch.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;X Scale&quot;, x_scale);&amp;#10;psychoJS.experiment.addData(&quot;Y Scale&quot;, y_scale);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="&amp;#10;thisExp.addData('X Scale',x_scale)&amp;#10;thisExp.addData('Y Scale',y_scale)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_scale_touch" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_top_touch" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_top_touch" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, .7)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Resize this image to match the size of a credit card by clicking/tapping the arrows:&amp;#10;Up = taller&amp;#10;Down = shorter&amp;#10;Left = narrower&amp;#10;Right = wider" valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="tri_up" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="tri_up" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.55, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="triangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="tri_down" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="tri_down" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="180" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.55, 0.2)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="triangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="tri_right" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="tri_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="90" valType="num" updates="constant" name="ori"/>
        <Param val="(0.65, 0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="triangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="tri_left" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="tri_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="270" valType="num" updates="constant" name="ori"/>
        <Param val="(0.5, 0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="triangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="ccimage_touch" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="bank-1300155_640.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="ccimage_touch" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$(x_size*x_scale, y_size*y_scale)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouse" plugin="None">
        <Param val="tri_up, tri_down, tri_left, tri_right" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="every frame" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="text_bottom_touch" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_bottom_touch" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$text_bottom_touch_text" valType="str" updates="set every frame" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="continue_button" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="continue.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="continue_button" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.65, -0.45)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.07)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="height" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="retangle_touch">
      <RoutineSettingsComponent name="retangle_touch" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="retangle_touch" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="rectangle_text_touch" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="rectangle_text_touch" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -.8)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This shape should be a 10 cm square.&amp;#10;Component size  (10*x_scale, 10*y_scale) set every repeat.&amp;#10;Click or touch here to continue." valType="str" updates="constant" name="text"/>
        <Param val="norm" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="polygon" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(10*x_scale, 10*y_scale)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <MouseComponent name="mouse_end" plugin="None">
        <Param val="rectangle_text_touch" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_end" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="bye">
      <RoutineSettingsComponent name="bye" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="bye" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="🎉 Experiment Complete 🎉&amp;#10;&amp;#10;Thank you for participating in this experiment!&amp;#10;&amp;#10;Your responses have been successfully recorded.  &amp;#10;If you have any questions or feedback, feel free to contact the experimenter.&amp;#10;&amp;#10;Please press the **spacebar** to exit, or simply close this page.&amp;#10;&amp;#10;Wishing you a great day!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="encoding">
      <RoutineSettingsComponent name="encoding" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="encoding" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="BKG_3" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-0.25,-0.25,-0.25]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="5" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="BKG_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(15, 15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="Fixation_3" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="360" valType="int" updates="constant" name="nVertices"/>
        <Param val="Fixation_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(0.01, 0.01)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="999" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="Direction" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="// 新版 RDKEnvelope：使用 RampEnvelope 管理 coherence 插值，并统一混合点池绘制&amp;#10;class RampEnvelope {&amp;#10;  constructor(coherence = 0.7, rampDur = 30, plateauDur = 1140) {&amp;#10;    this.coherence = coherence;&amp;#10;    this.rampDur = rampDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.totalDur = 2 * rampDur + plateauDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    if (tNow &lt; 0) return 0;&amp;#10;    if (tNow &lt; this.rampDur) {&amp;#10;      return this.coherence * (tNow / this.rampDur);&amp;#10;    } else if (tNow &lt; this.rampDur + this.plateauDur) {&amp;#10;      return this.coherence;&amp;#10;    } else if (tNow &lt; this.totalDur) {&amp;#10;      return this.coherence * (1 - (tNow - this.rampDur - this.plateauDur) / this.rampDur);&amp;#10;    } else {&amp;#10;      return 0;&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class RDKEnvelope {&amp;#10;  constructor({&amp;#10;    canvasId = &quot;rdkCanvas&quot;,&amp;#10;    coherence = 0.7,&amp;#10;    direction = 0,&amp;#10;    timeDur = 1200,&amp;#10;    dotSize = 2,&amp;#10;    fieldRadius = 200,&amp;#10;    speed = 3.5,&amp;#10;    totalDots = 360,&amp;#10;    noiseMode = &quot;inertial&quot;,&amp;#10;    fps = 120&amp;#10;  }) {&amp;#10;    const rampDur = coherence === 0.3 ? 60 : 30;&amp;#10;    const plateauDur = timeDur - 2 * rampDur;&amp;#10;    this.envelope = new RampEnvelope(coherence, rampDur, plateauDur);&amp;#10;&amp;#10;    this.direction = direction;&amp;#10;    this.dotSize = dotSize;&amp;#10;    this.fieldRadius = fieldRadius;&amp;#10;    this.speed = speed;&amp;#10;    this.totalDots = totalDots;&amp;#10;    this.noiseMode = noiseMode;&amp;#10;    this.fps = fps;&amp;#10;&amp;#10;    this.canvas = document.getElementById(canvasId) || document.createElement(&quot;canvas&quot;);&amp;#10;    this.canvas.id = canvasId;&amp;#10;    this.canvas.width = window.innerWidth;&amp;#10;    this.canvas.height = window.innerHeight;&amp;#10;    this.canvas.style.position = &quot;absolute&quot;;&amp;#10;    this.canvas.style.left = &quot;0&quot;;&amp;#10;    this.canvas.style.top = &quot;0&quot;;&amp;#10;    this.canvas.style.zIndex = &quot;1000&quot;;&amp;#10;    document.body.appendChild(this.canvas);&amp;#10;    this.ctx = this.canvas.getContext(&quot;2d&quot;);&amp;#10;    this.centerX = this.canvas.width / 2;&amp;#10;    this.centerY = this.canvas.height / 2;&amp;#10;&amp;#10;    this.signalDots = this.generateDots(false);&amp;#10;    this.noiseDots = this.generateDots(true);&amp;#10;  }&amp;#10;&amp;#10;  generateDots(withTheta = false) {&amp;#10;    const dots = [];&amp;#10;    for (let i = 0; i &lt; this.totalDots; i++) {&amp;#10;      const angle = 2 * Math.PI * Math.random();&amp;#10;      const radius = this.fieldRadius * Math.sqrt(Math.random());&amp;#10;      const dot = {&amp;#10;        x: this.centerX + radius * Math.cos(angle),&amp;#10;        y: this.centerY + radius * Math.sin(angle),&amp;#10;      };&amp;#10;      if (withTheta) dot.theta = 2 * Math.PI * Math.random();&amp;#10;      dots.push(dot);&amp;#10;    }&amp;#10;    return this.shuffleArray(dots);&amp;#10;  }&amp;#10;&amp;#10;  shuffleArray(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;      const j = Math.floor(Math.random() * (i + 1));&amp;#10;      [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array;&amp;#10;  }&amp;#10;&amp;#10;updateAndDraw(tNow) {&amp;#10;  const coh = this.envelope.getCoherence(tNow);&amp;#10;  const nSig = Math.round(this.totalDots * coh);&amp;#10;  const nNoise = this.totalDots - nSig;&amp;#10;  const fullPool = this.shuffleArray([...this.signalDots, ...this.noiseDots]);&amp;#10;  const signalPool = fullPool.slice(0, nSig);&amp;#10;  const noisePool  = fullPool.slice(nSig, this.totalDots);&amp;#10;&amp;#10;&amp;#10;// 先清除所有旧 type，避免颜色污染&amp;#10;    for (let d of this.signalDots) delete d.type;&amp;#10;    for (let d of this.noiseDots)  delete d.type;&amp;#10;&amp;#10;// 只给当前要绘制的 dot 赋予 type&amp;#10;    for (let d of signalPool) d.type = &quot;signal&quot;;&amp;#10;    for (let d of noisePool)  d.type = &quot;noise&quot;;&amp;#10;&amp;#10;&amp;#10;  for (let d of signalPool) this.updateSignalDot(d);&amp;#10;  for (let d of noisePool)  this.updateNoiseDot(d);&amp;#10;&amp;#10;  // ✅ 插入调试点位是否更新的日志&amp;#10;  if (signalPool.length &gt; 0) {&amp;#10;    const s = signalPool[0];&amp;#10;    console.log(`First signal dot position: x=${s.x.toFixed(1)}, y=${s.y.toFixed(1)}`);&amp;#10;  }&amp;#10;&amp;#10;  const drawPool = this.shuffleArray([...signalPool, ...noisePool]);&amp;#10;&amp;#10;  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);&amp;#10;  for (let d of drawPool) this.drawDot(d);&amp;#10;&amp;#10;  console.log(`t=${tNow.toFixed(1)}ms | coh=${coh.toFixed(2)} | signal=${nSig} | noise=${nNoise}`);&amp;#10;&amp;#10;  if (this.envelope.isFinished(tNow)) {&amp;#10;    this.clear();&amp;#10;    return false;&amp;#10;  }&amp;#10;  return true;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;  updateSignalDot(d) {&amp;#10;    const dx = this.speed * Math.cos(this.direction * Math.PI / 180);&amp;#10;    const dy = this.speed * Math.sin(this.direction * Math.PI / 180);&amp;#10;    d.x += dx;&amp;#10;    d.y += dy;&amp;#10;    const dist = Math.hypot(d.x - this.centerX, d.y - this.centerY);&amp;#10;    if (dist &gt; this.fieldRadius) {&amp;#10;      Object.assign(d, this.randomDot(false));&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  updateNoiseDot(d) {&amp;#10;    if (this.noiseMode === &quot;walk&quot;) {&amp;#10;      d.theta = 2 * Math.PI * Math.random();&amp;#10;    }&amp;#10;    if (this.noiseMode === &quot;replace&quot;) {&amp;#10;      Object.assign(d, this.randomDot(true));&amp;#10;    } else {&amp;#10;      d.x += this.speed * Math.cos(d.theta);&amp;#10;      d.y += this.speed * Math.sin(d.theta);&amp;#10;    }&amp;#10;    const dist = Math.hypot(d.x - this.centerX, d.y - this.centerY);&amp;#10;    if (dist &gt; this.fieldRadius) {&amp;#10;      Object.assign(d, this.randomDot(true));&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;randomDot(withTheta = false) {&amp;#10;  const angle = 2 * Math.PI * Math.random();&amp;#10;  const radius = this.fieldRadius * Math.sqrt(Math.random());&amp;#10;  const dot = {&amp;#10;    x: this.centerX + radius * Math.cos(angle),&amp;#10;    y: this.centerY + radius * Math.sin(angle),&amp;#10;  };&amp;#10;  if (withTheta) {&amp;#10;    dot.theta = 2 * Math.PI * Math.random();&amp;#10;  } else {&amp;#10;    // very important for inertial mode&amp;#10;    dot.theta = this.direction * Math.PI / 180;&amp;#10;  }&amp;#10;  return dot;&amp;#10;}&amp;#10;&amp;#10;  drawDot(d) {&amp;#10;    this.ctx.beginPath();&amp;#10;    this.ctx.arc(d.x, d.y, this.dotSize, 0, 2 * Math.PI);&amp;#10;    this.ctx.fillStyle =&amp;#10;  d.type === &quot;signal&quot; ? &quot;lime&quot; :&amp;#10;  d.type === &quot;noise&quot;  ? &quot;red&quot; :&amp;#10;  &quot;gray&quot;;  // fallback 防止残留 signal 点未被覆盖&amp;#10;&amp;#10;    this.ctx.fill();&amp;#10;   &amp;#10;  }&amp;#10;&amp;#10;  clear() {&amp;#10;    if (this.canvas &amp;&amp; this.canvas.parentNode) {&amp;#10;      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);&amp;#10;      this.canvas.remove();&amp;#10;    }&amp;#10;  }&amp;#10;}" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// 获取参数（来自 trial handler 或 conditions）&amp;#10;window.coherence = parseFloat(Coherence1);&amp;#10;window.timeDur = parseFloat(TimeDur) * 1000;  // 单位：ms&amp;#10;window.rampDur = (window.coherence === 0.3) ? 60 : 30;&amp;#10;window.direction = window.trial_direction;&amp;#10;&amp;#10;// 像素换算（cm → px）&amp;#10;let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;let speed = (3.5 * cm_to_px_x) / 120;  // px per frame @120fps&amp;#10;&amp;#10;// 初始化 RDKEnvelope&amp;#10;window.rdkStart = performance.now();&amp;#10;window.rdk = new RDKEnvelope({&amp;#10;  canvasId: &quot;rdkCanvas&quot;,&amp;#10;  coherence: window.coherence,&amp;#10;  direction: window.direction,&amp;#10;  timeDur: window.timeDur,&amp;#10;  dotSize: 0.03 * cm_to_px_x,&amp;#10;  fieldRadius: 3.5 * cm_to_px_x,&amp;#10;  speed: speed,&amp;#10;  noiseMode: &quot;inertial&quot;&amp;#10;});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if (!window.rdkCanvas) {&amp;#10;  const root = document.getElementById(&quot;root&quot;);&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;10&quot;;&amp;#10;  canvas.style.backgroundColor = &quot;transparent&quot;;&amp;#10;  root.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;&amp;#10;  // 初始化 RDK&amp;#10;  window.rdk = new RDK({&amp;#10;    canvasId: &quot;canvas&quot;,&amp;#10;    direction: 0,  // 可替换为变量&amp;#10;    coherence: 0.5, // 可替换为变量&amp;#10;    nDots: 300,&amp;#10;    speed: 1.5,&amp;#10;    dotSize: 2,&amp;#10;  });&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="let tNow = performance.now() - window.rdkStart;&amp;#10;let keepGoing = window.rdk.updateAndDraw(tNow);&amp;#10;if (!keepGoing) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// 清除 Canvas&amp;#10;if (window.rdkCanvas) {&amp;#10;  const ctx = window.rdkCanvas.getContext(&quot;2d&quot;);&amp;#10;  ctx.clearRect(0, 0, window.rdkCanvas.width, window.rdkCanvas.height);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="Direction" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="D2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class FlexibleRampEnvelope {&amp;#10;  constructor({&amp;#10;    startCoherence = 0.0,&amp;#10;    targetCoherence = 0.7,&amp;#10;    preRandomDur = 0,           // ⬅️ 新增：前置纯随机时长&amp;#10;    rampUpDur = 200,&amp;#10;    plateauDur = 800,&amp;#10;    rampDownDur = 200,&amp;#10;    postRandomDur = 0           // ⬅️ 新增：后置纯随机时长&amp;#10;  }) {&amp;#10;    this.startCoherence = startCoherence;&amp;#10;    this.targetCoherence = targetCoherence;&amp;#10;    this.preRandomDur = preRandomDur;&amp;#10;    this.rampUpDur = rampUpDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.rampDownDur = rampDownDur;&amp;#10;    this.postRandomDur = postRandomDur;&amp;#10;&amp;#10;    this.totalDur = preRandomDur + rampUpDur + plateauDur + rampDownDur + postRandomDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const c0 = this.startCoherence;&amp;#10;    const c1 = this.targetCoherence;&amp;#10;&amp;#10;    if (tNow &lt; 0) return c0;&amp;#10;&amp;#10;    const t1 = this.preRandomDur;&amp;#10;    const t2 = t1 + this.rampUpDur;&amp;#10;    const t3 = t2 + this.plateauDur;&amp;#10;    const t4 = t3 + this.rampDownDur;&amp;#10;    const t5 = t4 + this.postRandomDur;&amp;#10;&amp;#10;    if (tNow &lt; t1) return c0;  // pre-random&amp;#10;    if (tNow &lt; t2) return c0 + (c1 - c0) * ((tNow - t1) / this.rampUpDur);  // ramp-up&amp;#10;    if (tNow &lt; t3) return c1;  // plateau&amp;#10;    if (tNow &lt; t4) return c1 + (c0 - c1) * ((tNow - t3) / this.rampDownDur);  // ramp-down&amp;#10;    if (tNow &lt; t5) return c0;  // post-random&amp;#10;    return c0;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/***** 初始化 Canvas 并设置参数 *****/&amp;#10;// 创建并挂载 RDK 画布&amp;#10;window.canvas = document.createElement(&quot;canvas&quot;);&amp;#10;window.canvas.id = &quot;rdkCanvas&quot;;&amp;#10;window.canvas.width = window.innerWidth;&amp;#10;window.canvas.height = window.innerHeight;&amp;#10;window.canvas.style.position = &quot;absolute&quot;;&amp;#10;window.canvas.style.left = &quot;0&quot;;&amp;#10;window.canvas.style.top = &quot;0&quot;;&amp;#10;window.canvas.style.zIndex = &quot;1000&quot;;&amp;#10;document.body.appendChild(window.canvas);&amp;#10;&amp;#10;// 获取绘图上下文&amp;#10;window.ctx = window.canvas.getContext(&quot;2d&quot;);&amp;#10;&amp;#10;/***** 计算单位换算参数 *****/&amp;#10;let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;let cm_to_px_y = psychoJS.window.size[1] * y_scale;&amp;#10;&amp;#10;/***** 读取 trial 参数 *****/&amp;#10;const targetCoherence = parseFloat(Coherence1);    // e.g. 0.3 or 0.7&amp;#10;const timeDur = parseFloat(TimeDur) * 1000;        // 中点到中点的有效感知时间（ms）&amp;#10;window.direction = window.trial_direction * Math.PI / 180; // 转为弧度&amp;#10;&amp;#10;/***** 设置各阶段持续时间 *****/&amp;#10;const rampDur = (targetCoherence === 0.3) ? 60 : 30;  // rampUp &amp; rampDown 都是这个&amp;#10;const preRandomDur = 200;&amp;#10;const postRandomDur = 200;&amp;#10;const plateau = timeDur - rampDur;  // 根据设计，中点到中点不含 pre/post&amp;#10;&amp;#10;// 错误检查&amp;#10;if (plateau &lt; 0) {&amp;#10;  console.warn(&quot;⚠️ Plateau duration &lt; 0! TimeDur 设置过短。&quot;);&amp;#10;}&amp;#10;&amp;#10;/***** 初始化 Coherence 包络对象 *****/&amp;#10;class FlexibleRampEnvelope {&amp;#10;  constructor({ startCoherence = 0.0, targetCoherence = 0.7, preRandomDur = 200, rampUpDur = 60, plateauDur = 1000, rampDownDur = 60, postRandomDur = 200 }) {&amp;#10;    this.startCoherence = startCoherence;&amp;#10;    this.targetCoherence = targetCoherence;&amp;#10;    this.preRandomDur = preRandomDur;&amp;#10;    this.rampUpDur = rampUpDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.rampDownDur = rampDownDur;&amp;#10;    this.postRandomDur = postRandomDur;&amp;#10;    this.totalDur = preRandomDur + rampUpDur + plateauDur + rampDownDur + postRandomDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const c0 = this.startCoherence;&amp;#10;    const c1 = this.targetCoherence;&amp;#10;    if (tNow &lt; 0) return c0;&amp;#10;    if (tNow &lt; this.preRandomDur) return 0.0;&amp;#10;    const t = tNow - this.preRandomDur;&amp;#10;&amp;#10;    if (t &lt;= this.rampUpDur)&amp;#10;      return c0 + (c1 - c0) * (t / this.rampUpDur);&amp;#10;    if (t &lt;= this.rampUpDur + this.plateauDur)&amp;#10;      return c1;&amp;#10;    if (t &lt;= this.rampUpDur + this.plateauDur + this.rampDownDur)&amp;#10;      return c1 + (c0 - c1) * ((t - this.rampUpDur - this.plateauDur) / this.rampDownDur);&amp;#10;    if (t &lt;= this.rampUpDur + this.plateauDur + this.rampDownDur + this.postRandomDur)&amp;#10;      return 0.0;&amp;#10;&amp;#10;    return c0;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;window.rdkEnvelope = new FlexibleRampEnvelope({&amp;#10;  startCoherence: 0.0,&amp;#10;  targetCoherence: targetCoherence,&amp;#10;  preRandomDur: preRandomDur,&amp;#10;  rampUpDur: rampDur,&amp;#10;  plateauDur: plateau,&amp;#10;  rampDownDur: rampDur,&amp;#10;  postRandomDur: postRandomDur&amp;#10;});&amp;#10;&amp;#10;/***** 初始化 dot 列表 *****/&amp;#10;const totalDots = 360;&amp;#10;window.centerX = window.canvas.width / 2;&amp;#10;window.centerY = window.canvas.height / 2;&amp;#10;window.radius = 3.5 * cm_to_px_x;&amp;#10;window.dotSize = 0.03 * cm_to_px_x;&amp;#10;window.speed = 3.5 * cm_to_px_x / 120;&amp;#10;&amp;#10;// 初始化 dot 位置&amp;#10;window.rdkDots = Array.from({ length: totalDots }, () =&gt; {&amp;#10;  const angle = 2 * Math.PI * Math.random();&amp;#10;  const r = window.radius * Math.sqrt(Math.random());&amp;#10;  return {&amp;#10;    x: window.centerX + r * Math.cos(angle),&amp;#10;    y: window.centerY + r * Math.sin(angle),&amp;#10;    theta: 2 * Math.PI * Math.random(),  // 仅供 noise 用&amp;#10;    active: false,&amp;#10;    isSignalCandidate: false&amp;#10;  };&amp;#10;});&amp;#10;&amp;#10;// 打乱并标记 signal 候选点&amp;#10;function shuffleArray(arr) {&amp;#10;  for (let i = arr.length - 1; i &gt; 0; i--) {&amp;#10;    const j = Math.floor(Math.random() * (i + 1));&amp;#10;    [arr[i], arr[j]] = [arr[j], arr[i]];&amp;#10;  }&amp;#10;}&amp;#10;shuffleArray(window.rdkDots);&amp;#10;&amp;#10;const nMaxSignal = Math.round(targetCoherence * totalDots);&amp;#10;window.rdkDots.forEach((d, i) =&gt; {&amp;#10;  d.isSignalCandidate = (i &lt; nMaxSignal);&amp;#10;  d.active = false;&amp;#10;});&amp;#10;console.log&amp;#10;/***** 启动时钟 *****/&amp;#10;window.rdkStartTime = performance.now();&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - window.rdkStartTime;&amp;#10;const ctx = window.ctx;&amp;#10;const canvas = window.canvas;&amp;#10;const timeDur = parseFloat(TimeDur) * 1000;  &amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;const totalDots = 360&amp;#10;const coh = window.rdkEnvelope.getCoherence(elapsed);&amp;#10;const nSignal = Math.round(coh * totalDots);&amp;#10;&amp;#10;// 激活前 nSignal 个 signal 候选点&amp;#10;let signalCount = 0;&amp;#10;for (let d of window.rdkDots) {&amp;#10;  if (d.isSignalCandidate &amp;&amp; signalCount &lt; nSignal) {&amp;#10;    d.active = true;&amp;#10;    signalCount++;&amp;#10;  } else {&amp;#10;    d.active = false;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;// 更新位置 &amp; 绘制点&amp;#10;for (let d of window.rdkDots) {&amp;#10;  const theta = d.active ? direction : d.theta;&amp;#10;&amp;#10;  d.x += window.speed * Math.cos(theta);&amp;#10;  d.y += window.speed * Math.sin(theta);&amp;#10;&amp;#10;  const dist = Math.hypot(d.x - window.centerX, d.y - window.centerY);&amp;#10;  if (dist &gt; window.radius) {&amp;#10;    const angle = 2 * Math.PI * Math.random();&amp;#10;    const r = window.radius * Math.sqrt(Math.random());&amp;#10;    d.x = window.centerX + r * Math.cos(angle);&amp;#10;    d.y = window.centerY + r * Math.sin(angle);&amp;#10;    d.theta = 2 * Math.PI * Math.random();&amp;#10;  }&amp;#10;&amp;#10;  ctx.beginPath();&amp;#10;  ctx.arc(d.x, d.y, window.dotSize, 0, 2 * Math.PI);&amp;#10;  ctx.fillStyle = &quot;white&quot;; // 统一使用白色显示&amp;#10;  ctx.fill();&amp;#10;}&amp;#10;&amp;#10;// ✅ 打印调试&amp;#10;console.log(`t=${elapsed.toFixed(1)}ms | coherence=${coh.toFixed(2)} | signal=${nSignal} | TimeD=${timeDur}`);&amp;#10;&amp;#10;&amp;#10;// ✅ 检查结束&amp;#10;if (window.rdkEnvelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;document.body.removeChild(canvas);&amp;#10;const plotDiv = document.getElementById(&quot;plotDiv&quot;);&amp;#10;if (plotDiv) {&amp;#10;  plotDiv.remove();&amp;#10;}&amp;#10;window.debugData = null;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="D2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="Onedot" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class FlexibleRampEnvelope {&amp;#10;  constructor({ startCoherence, targetCoherence, preRandomDur, rampUpDur, plateauDur, rampDownDur, postRandomDur }) {&amp;#10;    this.startCoherence = startCoherence;&amp;#10;    this.targetCoherence = targetCoherence;&amp;#10;    this.preRandomDur = preRandomDur;&amp;#10;    this.rampUpDur = rampUpDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.rampDownDur = rampDownDur;&amp;#10;    this.postRandomDur = postRandomDur;&amp;#10;    this.totalDur = preRandomDur + rampUpDur + plateauDur  + postRandomDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const c0 = this.startCoherence;&amp;#10;    const c1 = this.targetCoherence;&amp;#10;    const t1 = this.preRandomDur;&amp;#10;    const t2 = t1 + this.rampUpDur;&amp;#10;    const t3 = t2 + this.plateauDur;&amp;#10;    const t4 = t3 + this.rampDownDur;&amp;#10;    const t5 = t4 + this.postRandomDur;&amp;#10;&amp;#10;    if (tNow &lt; 0) return c0;&amp;#10;    if (tNow &lt; t1) return c0;&amp;#10;    if (tNow &lt; t2) return c0 + (c1 - c0) * ((tNow - t1) / this.rampUpDur);&amp;#10;    if (tNow &lt; t3) return c1;&amp;#10;    if (tNow &lt; t4) return c1 + (c0 - c1) * ((tNow - t3) / this.rampDownDur);&amp;#10;    if (tNow &lt; t5) return c0;&amp;#10;    return c0;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// ========== 参数定义 ==========&amp;#10;// 获取参数（来自 trial handler 或 conditions）&amp;#10;window.coherence = parseFloat(Coherence1);&amp;#10;window.timeDur = parseFloat(TimeDur) * 1000;  // 单位：ms&amp;#10;window.rampDur = (window.coherence === 0.3) ? 60 : 30;&amp;#10;window.direction = window.trial_direction;&amp;#10;cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;cm_to_px_y = psychoJS.window.size[1] * y_scale;&amp;#10;speed = 0.035 * cm_to_px_x;  // 每秒像素速度（你定的）&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;dotRadius = 0.03* cm_to_px_x;  // 建议测试时可调大为 5~6 观察清晰度&amp;#10;centerX = window.innerWidth / 2;&amp;#10;centerY = window.innerHeight / 2;&amp;#10;&amp;#10;// coherent 方向设置为 trial 参数&amp;#10;direction = window.trial_direction * Math.PI / 180;&amp;#10;&amp;#10;// ========== 初始化 dots ==========&amp;#10;dots = Array.from({ length: 1 }, () =&gt; {&amp;#10;  const angle = 2 * Math.PI * Math.random();&amp;#10;  const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;  return {&amp;#10;    x: centerX + r * Math.cos(angle),&amp;#10;    y: centerY + r * Math.sin(angle),&amp;#10;    theta: Math.random() * 2 * Math.PI&amp;#10;  };&amp;#10;});&amp;#10;&amp;#10;&amp;#10;// ========== coherence 包络函数 ==========&amp;#10;envelope = new FlexibleRampEnvelope({&amp;#10;  startCoherence: 0.0,&amp;#10;  targetCoherence: window.coherence ,&amp;#10;  preRandomDur: 1000,&amp;#10;  rampUpDur: window.rampDur ,&amp;#10;  plateauDur: window.timeDur,&amp;#10;  rampDownDur: window.rampDur ,&amp;#10;  postRandomDur: 1000&amp;#10;});&amp;#10;// 只创建一次 canvas&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;canvas&quot;;&amp;#10;  canvas.width = psychoJS.window.size[0];&amp;#10;  canvas.height = psychoJS.window.size[1];&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;999&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;&amp;#10;// 获取 context&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;&amp;#10;// ========== 启动时间 ==========&amp;#10;startTime = performance.now();&amp;#10;lastFrameTime = startTime;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const deltaTime = (now - lastFrameTime) / 1000;&amp;#10;lastFrameTime = now;&amp;#10;&amp;#10;// 获取当前 coherence&amp;#10;const coh = envelope.getCoherence(elapsed);&amp;#10;// 清空背景&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.fillRect(0, 0, canvas.width, canvas.height);&amp;#10;&amp;#10;&amp;#10;// 每帧中：&amp;#10;for (let dot of dots) {&amp;#10;  const useCoherent = Math.random() &lt; coh;&amp;#10;  const angle = useCoherent ? direction : dot.theta;&amp;#10;&amp;#10;  // 更新位置&amp;#10;  dot.x += speed * Math.cos(angle);&amp;#10;  dot.y += speed * Math.sin(angle);&amp;#10;&amp;#10;&amp;#10;  // Dot lifetime：避免聚集&amp;#10;  dot.age = (dot.age || 0) + 1;&amp;#10;  if (dot.age &gt; 120) {&amp;#10;    const a = Math.random() * 2 * Math.PI;&amp;#10;    const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;    dot.x = centerX + r * Math.cos(a);&amp;#10;    dot.y = centerY + r * Math.sin(a);&amp;#10;    dot.theta = Math.random() * 2 * Math.PI;&amp;#10;    dot.age = 0;&amp;#10;  }&amp;#10;&amp;#10;  // wrap-around 保留&amp;#10;  const dx = dot.x - centerX;&amp;#10;  const dy = dot.y - centerY;&amp;#10;  const dist = Math.sqrt(dx * dx + dy * dy);&amp;#10;  if (dist &gt; fieldRadius) {&amp;#10;    const a = 2 * Math.PI * Math.random();&amp;#10;    const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;    dot.x = centerX + r * Math.cos(a);&amp;#10;    dot.y = centerY + r * Math.sin(a);&amp;#10;  }&amp;#10;&amp;#10;  // 绘制&amp;#10;  ctx.beginPath();&amp;#10;  ctx.arc(dot.x, dot.y, dotRadius, 0, 2 * Math.PI);&amp;#10;  ctx.fillStyle = &quot;white&quot;;&amp;#10;  ctx.fill();&amp;#10;}&amp;#10;&amp;#10;&amp;#10;// 日志&amp;#10;console.log(`t=${elapsed.toFixed(0)}ms | coh=${coh.toFixed(2)}`);&amp;#10;&amp;#10;// 包络结束&amp;#10;if (envelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="Onedot" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="RDKcontroller" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class FlexibleRampEnvelope {&amp;#10;  constructor({ startCoherence = 0.0, targetCoherence = 0.6, preRandomDur = 500, rampUpDur = 200, plateauDur = 1000, rampDownDur = 200, postRandomDur = 300 }) {&amp;#10;    this.startCoherence = startCoherence;&amp;#10;    this.targetCoherence = targetCoherence;&amp;#10;    this.preRandomDur = preRandomDur;&amp;#10;    this.rampUpDur = rampUpDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.rampDownDur = rampDownDur;&amp;#10;    this.postRandomDur = postRandomDur;&amp;#10;    this.totalDur = preRandomDur + rampUpDur + plateauDur + rampDownDur + postRandomDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const c0 = this.startCoherence;&amp;#10;    const c1 = this.targetCoherence;&amp;#10;    const t1 = this.preRandomDur;&amp;#10;    const t2 = t1 + this.rampUpDur;&amp;#10;    const t3 = t2 + this.plateauDur;&amp;#10;    const t4 = t3 + this.rampDownDur;&amp;#10;    const t5 = t4 + this.postRandomDur;&amp;#10;&amp;#10;    if (tNow &lt; t1) return c0;&amp;#10;    if (tNow &lt; t2) return c0 + (c1 - c0) * ((tNow - t1) / this.rampUpDur);&amp;#10;    if (tNow &lt; t3) return c1;&amp;#10;    if (tNow &lt; t4) return c1 + (c0 - c1) * ((tNow - t3) / this.rampDownDur);&amp;#10;    if (tNow &lt; t5) return c0;&amp;#10;    return c0;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class CustomRDK {&amp;#10;  constructor({ canvas, nDots, envelope, speed, dotSize, fieldRadius, direction, motionType, noiseMode }) {&amp;#10;    this.canvas = canvas;&amp;#10;    this.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;    this.nDots = nDots;&amp;#10;    this.envelope = envelope;&amp;#10;    this.speed = speed; // px/s&amp;#10;    this.dotSize = dotSize;&amp;#10;    this.fieldRadius = fieldRadius;&amp;#10;    this.centerX = canvas.width / 2;&amp;#10;    this.centerY = canvas.height / 2;&amp;#10;    this.motionType = motionType;&amp;#10;    this.noiseMode = noiseMode;&amp;#10;    this.direction = direction * Math.PI / 180; // degree → rad&amp;#10;    this.dots = this.initDots();&amp;#10;    this.startTime = performance.now();&amp;#10;    this.lastCoherence = 0;&amp;#10;  }&amp;#10;&amp;#10;  initDots() {&amp;#10;    return Array.from({ length: this.nDots }, () =&gt; {&amp;#10;      const angle = 2 * Math.PI * Math.random();&amp;#10;      const r = this.fieldRadius * Math.sqrt(Math.random());&amp;#10;      return {&amp;#10;        x: this.centerX + r * Math.cos(angle),&amp;#10;        y: this.centerY + r * Math.sin(angle),&amp;#10;        theta: 2 * Math.PI * Math.random()&amp;#10;      };&amp;#10;    });&amp;#10;  }&amp;#10;&amp;#10;  update(deltaTime) {&amp;#10;    const now = performance.now();&amp;#10;    const elapsed = now - this.startTime;&amp;#10;    const ctx = this.ctx;&amp;#10;    const coh = this.envelope.getCoherence(elapsed);&amp;#10;    this.lastCoherence = coh;&amp;#10;&amp;#10;    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);&amp;#10;&amp;#10;    for (let dot of this.dots) {&amp;#10;      const isSignal = Math.random() &lt; coh;&amp;#10;&amp;#10;      let angle;&amp;#10;      if (this.motionType === &quot;radialIn&quot;) {&amp;#10;        angle = Math.atan2(this.centerY - dot.y, this.centerX - dot.x);&amp;#10;      } else if (this.motionType === &quot;radialOut&quot;) {&amp;#10;        angle = Math.atan2(dot.y - this.centerY, dot.x - this.centerX);&amp;#10;      } else {&amp;#10;        angle = this.direction;&amp;#10;      }&amp;#10;&amp;#10;      const moveAngle = isSignal ? angle : dot.theta;&amp;#10;&amp;#10;      // 移动&amp;#10;      dot.x += this.speed * deltaTime * Math.cos(moveAngle);&amp;#10;      dot.y += this.speed * deltaTime * Math.sin(moveAngle);&amp;#10;&amp;#10;      // noise: 随机方向更新&amp;#10;      if (!isSignal &amp;&amp; this.noiseMode === &quot;walk&quot;) {&amp;#10;        dot.theta = 2 * Math.PI * Math.random();&amp;#10;      }&amp;#10;&amp;#10;      // wrap around&amp;#10;      const dx = dot.x - this.centerX;&amp;#10;      const dy = dot.y - this.centerY;&amp;#10;      const dist = Math.sqrt(dx * dx + dy * dy);&amp;#10;      if (dist &gt; this.fieldRadius || isNaN(dot.x)) {&amp;#10;        const angle = 2 * Math.PI * Math.random();&amp;#10;        const r = this.fieldRadius * Math.sqrt(Math.random());&amp;#10;        dot.x = this.centerX + r * Math.cos(angle);&amp;#10;        dot.y = this.centerY + r * Math.sin(angle);&amp;#10;        dot.theta = 2 * Math.PI * Math.random();&amp;#10;      }&amp;#10;&amp;#10;      // draw&amp;#10;      ctx.beginPath();&amp;#10;      ctx.arc(dot.x, dot.y, this.dotSize, 0, 2 * Math.PI);&amp;#10;      ctx.fillStyle = &quot;white&quot;;&amp;#10;      ctx.fill();&amp;#10;    }&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;speed = 3.5 * cm_to_px_x;  // px/s&amp;#10;&amp;#10;// 创建 canvas&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;rdkCanvas&quot;;&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// 启动时间&amp;#10;startTime = performance.now();&amp;#10;lastFrameTime = startTime;&amp;#10;&amp;#10;// 创建 envelope&amp;#10;envelope = new FlexibleRampEnvelope({&amp;#10;  startCoherence: 0.0,&amp;#10;  targetCoherence: 0.3,&amp;#10;  preRandomDur: 200,&amp;#10;  rampUpDur: 60,&amp;#10;  plateauDur: 1000,&amp;#10;  rampDownDur: 60,&amp;#10;  postRandomDur: 200&amp;#10;});&amp;#10;&amp;#10;// 创建 RDK 对象&amp;#10;rdk = new CustomRDK({&amp;#10;  canvas: canvas,&amp;#10;  nDots: 360,&amp;#10;  envelope: envelope,&amp;#10;  speed: speed,&amp;#10;  dotSize: dotRadius,&amp;#10;  fieldRadius: fieldRadius,&amp;#10;  direction: 45,&amp;#10;  motionType: &quot;oneDirection&quot;,  // 可换成 radialIn / radialOut&amp;#10;  noiseMode: &quot;walk&quot;&amp;#10;});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const deltaTime = (now - lastFrameTime) / 1000;&amp;#10;lastFrameTime = now;&amp;#10;&amp;#10;rdk.update(deltaTime);&amp;#10;&amp;#10;// 自动退出（envelope 结束）&amp;#10;if (envelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="RDKcontroller" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_4" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="// === 包络类定义 ===&amp;#10;class FlexibleRampEnvelope {&amp;#10;  constructor({ startCoherence = 0.0, targetCoherence = 0.7, preRandomDur = 500, rampUpDur = 300, plateauDur = 1000, rampDownDur = 300, postRandomDur = 500 }) {&amp;#10;    this.startCoherence = startCoherence;&amp;#10;    this.targetCoherence = targetCoherence;&amp;#10;    this.preRandomDur = preRandomDur;&amp;#10;    this.rampUpDur = rampUpDur;&amp;#10;    this.plateauDur = plateauDur;&amp;#10;    this.rampDownDur = rampDownDur;&amp;#10;    this.postRandomDur = postRandomDur;&amp;#10;    this.totalDur = preRandomDur + rampUpDur + plateauDur + rampDownDur + postRandomDur;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const c0 = this.startCoherence;&amp;#10;    const c1 = this.targetCoherence;&amp;#10;    const t1 = this.preRandomDur;&amp;#10;    const t2 = t1 + this.rampUpDur;&amp;#10;    const t3 = t2 + this.plateauDur;&amp;#10;    const t4 = t3 + this.rampDownDur;&amp;#10;    const t5 = t4 + this.postRandomDur;&amp;#10;&amp;#10;    if (tNow &lt; 0) return c0;&amp;#10;    if (tNow &lt; t1) return c0;&amp;#10;    if (tNow &lt; t2) return c0 + (c1 - c0) * ((tNow - t1) / this.rampUpDur);&amp;#10;    if (tNow &lt; t3) return c1;&amp;#10;    if (tNow &lt; t4) return c1 + (c0 - c1) * ((tNow - t3) / this.rampDownDur);&amp;#10;    if (tNow &lt; t5) return c0;&amp;#10;    return c0;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return tNow &gt;= this.totalDur;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// === 参数 ===&amp;#10;const fps = 60;&amp;#10;const x_scale = 0.05;&amp;#10;const y_scale = 0.05;&amp;#10;cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;cm_to_px_y = psychoJS.window.size[1] * y_scale;&amp;#10;speed = 3.5 * cm_to_px_x; // px/sec&amp;#10;dotRadius = 0.04 * cm_to_px_x;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;centerX = window.innerWidth / 2;&amp;#10;centerY = window.innerHeight / 2;&amp;#10;direction = trial_direction * Math.PI / 180;&amp;#10;&amp;#10;// === 创建 Canvas（仅一次） ===&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;rdkCanvas&quot;;&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// === 创建点阵 ===&amp;#10;const numDots = 360;&amp;#10;dots = [];&amp;#10;for (let i = 0; i &lt; numDots; i++) {&amp;#10;  const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;  const theta = Math.random() * 2 * Math.PI;&amp;#10;  dots.push({&amp;#10;    x: centerX + r * Math.cos(theta),&amp;#10;    y: centerY + r * Math.sin(theta),&amp;#10;    theta: Math.random() * 2 * Math.PI&amp;#10;  });&amp;#10;}&amp;#10;&amp;#10;// === 包络曲线 ===&amp;#10;envelope = new FlexibleRampEnvelope({&amp;#10;  startCoherence: 0.0,&amp;#10;  targetCoherence: 1.0,&amp;#10;  preRandomDur: 1000,&amp;#10;  rampUpDur: 300,&amp;#10;  plateauDur: 1000,&amp;#10;  rampDownDur: 300,&amp;#10;  postRandomDur: 500&amp;#10;});&amp;#10;&amp;#10;// === 启动时钟 ===&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const tNow = now - startTime;&amp;#10;const coherence = envelope.getCoherence(tNow);&amp;#10;&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;&amp;#10;// 绘制灰色背景圆&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.beginPath();&amp;#10;ctx.arc(centerX, centerY, fieldRadius, 0, 2 * Math.PI);&amp;#10;ctx.fill();&amp;#10;&amp;#10;// 绘制点阵&amp;#10;for (let i = 0; i &lt; dots.length; i++) {&amp;#10;  const isSignal = i &lt; Math.floor(coherence * dots.length);&amp;#10;  const d = dots[i];&amp;#10;  const moveDir = isSignal ? direction : d.theta;&amp;#10;&amp;#10;  // 移动&amp;#10;  d.x += (speed / fps) * Math.cos(moveDir);&amp;#10;  d.y += (speed / fps) * Math.sin(moveDir);&amp;#10;&amp;#10;  // 检查是否超出圆&amp;#10;  const dx = d.x - centerX;&amp;#10;  const dy = d.y - centerY;&amp;#10;  if (dx * dx + dy * dy &gt; fieldRadius * fieldRadius) {&amp;#10;    const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;    const theta = Math.random() * 2 * Math.PI;&amp;#10;    d.x = centerX + r * Math.cos(theta);&amp;#10;    d.y = centerY + r * Math.sin(theta);&amp;#10;    d.theta = Math.random() * 2 * Math.PI;&amp;#10;  }&amp;#10;&amp;#10;  // 绘制点&amp;#10;  ctx.beginPath();&amp;#10;  ctx.arc(d.x, d.y, dotRadius, 0, 2 * Math.PI);&amp;#10;  ctx.fillStyle = isSignal ? &quot;white&quot; : &quot;black&quot;;&amp;#10;  ctx.fill();&amp;#10;}&amp;#10;&amp;#10;// 提前结束条件（可选）&amp;#10;if (envelope.isFinished(tNow)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="var_3phase_one" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class OneDot {&amp;#10;  constructor(x, y, radius, speed, direction) {&amp;#10;    this.x = x;&amp;#10;    this.y = y;&amp;#10;    this.radius = radius;&amp;#10;    this.speed = speed;&amp;#10;    this.theta = Math.random() * 2 * Math.PI;  // 初始随机方向&amp;#10;    this.fixedDir = direction;  // coherent phase 使用&amp;#10;  }&amp;#10;&amp;#10;  update(phase, dt) {&amp;#10;    if (phase === &quot;inertial&quot;) {&amp;#10;      this.move(this.fixedDir, dt);&amp;#10;    } else {&amp;#10;      this.theta += (Math.random() - 0.5) * 0.3;  // 随机扰动&amp;#10;      this.move(this.theta, dt);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;move(theta, dt) {&amp;#10;  this.x += this.speed * dt * Math.cos(theta);&amp;#10;  this.y += this.speed * dt * Math.sin(theta);&amp;#10;&amp;#10;  // === 保持在圆内 ===&amp;#10;  const dx = this.x - fieldCenterX;&amp;#10;  const dy = this.y - fieldCenterY;&amp;#10;  const distSq = dx * dx + dy * dy;&amp;#10;  if (distSq &gt; fieldRadius * fieldRadius) {&amp;#10;    // wrap 到圆内随机点&amp;#10;    const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;    const a = Math.random() * 2 * Math.PI;&amp;#10;    this.x = fieldCenterX + r * Math.cos(a);&amp;#10;    this.y = fieldCenterY + r * Math.sin(a);&amp;#10;    this.theta = Math.random() * 2 * Math.PI;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;  draw(ctx) {&amp;#10;    ctx.beginPath();&amp;#10;    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);&amp;#10;    ctx.fillStyle = &quot;white&quot;;&amp;#10;    ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class DotEnvelope {&amp;#10;  constructor(pre = 1000, coh = 1500, post = 1000) {&amp;#10;    this.pre = pre;&amp;#10;    this.coh = coh;&amp;#10;    this.post = post;&amp;#10;    this.total = pre + coh + post;&amp;#10;  }&amp;#10;&amp;#10;  getPhase(t) {&amp;#10;    if (t &lt; this.pre) return &quot;walk&quot;;&amp;#10;    if (t &lt; this.pre + this.coh) return &quot;inertial&quot;;&amp;#10;    if (t &lt; this.total) return &quot;walk&quot;;&amp;#10;    return &quot;done&quot;;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// === 圆形运动区域参数 ===&amp;#10;cm_to_px_x = psychoJS.window.size[0] * 0.05;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;fieldCenterX = window.innerWidth / 2;&amp;#10;fieldCenterY = window.innerHeight / 2;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;dotSpeed = 1.75 * cm_to_px_x ;&amp;#10;// === 创建 dot 在圆内随机位置 ===&amp;#10;const direction = trial_direction * Math.PI / 180;&amp;#10;const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;const angle = Math.random() * 2 * Math.PI;&amp;#10;const x = fieldCenterX + r * Math.cos(angle);&amp;#10;const y = fieldCenterY + r * Math.sin(angle);&amp;#10;&amp;#10;dot = new OneDot(x, y, dotRadius, dotSpeed, direction);&amp;#10;&amp;#10;&amp;#10;&amp;#10;// === 创建 dot 对象 ===&amp;#10;dot = new OneDot(window.innerWidth / 2, window.innerHeight / 2, dotRadius, dotSpeed, direction);&amp;#10;&amp;#10;// === 包络结构：walk → inertial → walk ===&amp;#10;envelope = new DotEnvelope(200, 1500, 200);  // ms&amp;#10;&amp;#10;// === 创建 canvas（只建一次）===&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// === 启动计时 ===&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const dt = 1 / 60;&amp;#10;&amp;#10;const phase = envelope.getPhase(elapsed);&amp;#10;&amp;#10;// 更新 dot&amp;#10;dot.update(phase, dt);&amp;#10;&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;&amp;#10;// 画灰色背景圆&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.beginPath();&amp;#10;ctx.arc(fieldCenterX, fieldCenterY, fieldRadius, 0, 2 * Math.PI);&amp;#10;ctx.fill();&amp;#10;&amp;#10;// 绘制 dot&amp;#10;dot.draw(ctx);&amp;#10;&amp;#10;&amp;#10;// 自动结束&amp;#10;if (phase === &quot;done&quot;) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="var_3phase_one" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="var_3phase_360" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class Dot {&amp;#10;  constructor(x, y, radius, speed, direction, phaseStartTime = 0, rampUp = 300, plateau = 1000, rampDown = 300) {&amp;#10;    this.x = x;&amp;#10;    this.y = y;&amp;#10;    this.radius = radius;&amp;#10;    this.speed = speed;&amp;#10;    this.theta = Math.random() * 2 * Math.PI;&amp;#10;    this.fixedDir = direction;&amp;#10;&amp;#10;    this.phaseStartTime = phaseStartTime;&amp;#10;    this.rampUp = rampUp;&amp;#10;    this.plateau = plateau;&amp;#10;    this.rampDown = rampDown;&amp;#10;    this.total = rampUp + plateau + rampDown;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(tNow) {&amp;#10;    const t = tNow - this.phaseStartTime;&amp;#10;    if (t &lt; 0) return 0.0;&amp;#10;    if (t &lt; this.rampUp) return t / this.rampUp;&amp;#10;    if (t &lt; this.rampUp + this.plateau) return 1.0;&amp;#10;    if (t &lt; this.total) return 1.0 - (t - this.rampUp - this.plateau) / this.rampDown;&amp;#10;    return 0.0;&amp;#10;  }&amp;#10;&amp;#10;  update(tNow, dt) {&amp;#10;    const c = this.getCoherence(tNow);&amp;#10;    let moveDir;&amp;#10;&amp;#10;    if (Math.random() &lt; c) {&amp;#10;      moveDir = this.fixedDir;&amp;#10;    } else {&amp;#10;      this.theta += (Math.random() - 0.5) * 0.3;&amp;#10;      moveDir = this.theta;&amp;#10;    }&amp;#10;&amp;#10;    this.move(moveDir, dt);&amp;#10;  }&amp;#10;&amp;#10;  move(theta, dt) {&amp;#10;    this.x += this.speed * dt * Math.cos(theta);&amp;#10;    this.y += this.speed * dt * Math.sin(theta);&amp;#10;&amp;#10;    const dx = this.x - fieldCenterX;&amp;#10;    const dy = this.y - fieldCenterY;&amp;#10;    const dist2 = dx * dx + dy * dy;&amp;#10;    if (dist2 &gt; fieldRadius * fieldRadius) {&amp;#10;      const a = Math.random() * 2 * Math.PI;&amp;#10;      const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;      this.x = fieldCenterX + r * Math.cos(a);&amp;#10;      this.y = fieldCenterY + r * Math.sin(a);&amp;#10;      this.theta = Math.random() * 2 * Math.PI;&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  draw(ctx) {&amp;#10;    ctx.beginPath();&amp;#10;    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);&amp;#10;    ctx.fillStyle = &quot;white&quot;;&amp;#10;    ctx.fill();&amp;#10;  }&amp;#10;&amp;#10;  isFinished(tNow) {&amp;#10;    return (tNow - this.phaseStartTime) &gt; this.total;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// === 参数 ===&amp;#10;cm_to_px_x = psychoJS.window.size[0] * 0.05;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;fieldCenterX = window.innerWidth / 2;&amp;#10;fieldCenterY = window.innerHeight / 2;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;dotSpeed = 1.75 * cm_to_px_x;&amp;#10;direction = trial_direction * Math.PI / 180;&amp;#10;numDots = 360;&amp;#10;&amp;#10;// === 创建 dots ===&amp;#10;dots = [];&amp;#10;for (let i = 0; i &lt; numDots; i++) {&amp;#10;  const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;  const a = Math.random() * 2 * Math.PI;&amp;#10;  const x = fieldCenterX + r * Math.cos(a);&amp;#10;  const y = fieldCenterY + r * Math.sin(a);&amp;#10;&amp;#10;  const jitter = 200;  // 各 dot phaseStartTime 可微调&amp;#10;  const start = performance.now() + jitter;&amp;#10;&amp;#10;  const dot = new Dot(x, y, dotRadius, dotSpeed, direction, start, 30, 1000, 30);&amp;#10;  dots.push(dot);&amp;#10;}&amp;#10;&amp;#10;// === 创建 canvas ===&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// === 记录时间 ===&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const dt = 1 / 60;&amp;#10;&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.beginPath();&amp;#10;ctx.arc(fieldCenterX, fieldCenterY, fieldRadius, 0, 2 * Math.PI);&amp;#10;ctx.fill();&amp;#10;&amp;#10;let allDone = true;&amp;#10;&amp;#10;for (let i = 0; i &lt; dots.length; i++) {&amp;#10;  dots[i].update(now, dt);&amp;#10;  dots[i].draw(ctx);&amp;#10;&amp;#10;  if (!dots[i].isFinished(now)) {&amp;#10;    allDone = false;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;if (allDone) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="var_3phase_360" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="Noiseonedot" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class Dot {&amp;#10;  constructor(x, y, radius, speed, direction) {&amp;#10;    this.x = x;&amp;#10;    this.y = y;&amp;#10;    this.radius = radius;&amp;#10;    this.speed = speed;&amp;#10;    this.theta = Math.random() * 2 * Math.PI;&amp;#10;    this.fixedDir = direction;&amp;#10;  }&amp;#10;&amp;#10;  updateDirection(dt, mode) {&amp;#10;    if (mode === &quot;coherent&quot;) {&amp;#10;      this.move(this.fixedDir, dt);&amp;#10;    } else {&amp;#10;      this.theta += (Math.random() - 0.5) * 0.3;&amp;#10;      this.move(this.theta, dt);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  move(theta, dt) {&amp;#10;    this.x += this.speed * dt * Math.cos(theta);&amp;#10;    this.y += this.speed * dt * Math.sin(theta);&amp;#10;&amp;#10;    const dx = this.x - fieldCenterX;&amp;#10;    const dy = this.y - fieldCenterY;&amp;#10;    const dist2 = dx * dx + dy * dy;&amp;#10;    if (dist2 &gt; fieldRadius * fieldRadius) {&amp;#10;      const angle = Math.atan2(dy, dx) + Math.PI;&amp;#10;      const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;      this.x = fieldCenterX + r * Math.cos(angle);&amp;#10;      this.y = fieldCenterY + r * Math.sin(angle);&amp;#10;      this.theta = Math.random() * 2 * Math.PI;&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  draw(ctx) {&amp;#10;    ctx.beginPath();&amp;#10;    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);&amp;#10;    ctx.fillStyle = &quot;white&quot;;&amp;#10;    ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class PhaseEnvelope {&amp;#10;  constructor(pre = 200, coh = 800, post = 200) {&amp;#10;    this.t1 = pre;&amp;#10;    this.t2 = pre + coh;&amp;#10;    this.t3 = pre + coh + post;&amp;#10;  }&amp;#10;&amp;#10;  getPhase(t) {&amp;#10;    if (t &lt; this.t1) return &quot;random&quot;;&amp;#10;    if (t &lt; this.t2) return &quot;coherent&quot;;&amp;#10;    if (t &lt; this.t3) return &quot;random&quot;;&amp;#10;    return &quot;done&quot;;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(t) {&amp;#10;    return t &gt;= this.t3;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// --- 视觉参数计算 ---&amp;#10;const cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;fieldCenterX = window.innerWidth / 2;&amp;#10;fieldCenterY = window.innerHeight / 2;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;dotSpeed = 1.75 * cm_to_px_x;&amp;#10;direction = trial_direction * Math.PI / 180;&amp;#10;&amp;#10;// --- 初始化一个 dot ---&amp;#10;const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;const a = Math.random() * 2 * Math.PI;&amp;#10;const x = fieldCenterX + r * Math.cos(a);&amp;#10;const y = fieldCenterY + r * Math.sin(a);&amp;#10;dot = new Dot(x, y, dotRadius, dotSpeed, direction);&amp;#10;&amp;#10;// --- 相位包络结构（预期：random → coherent → random）---&amp;#10;envelope = new PhaseEnvelope(200, 800, 200); // 单位：毫秒&amp;#10;&amp;#10;// --- 创建 canvas ---&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// 启动计时&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const dt = 1 / 60;&amp;#10;&amp;#10;// 获取当前 phase：random / coherent&amp;#10;const phase = envelope.getPhase(elapsed);&amp;#10;&amp;#10;// 更新 dot 行为&amp;#10;dot.updateDirection(dt, phase);&amp;#10;&amp;#10;// 绘制背景&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.beginPath();&amp;#10;ctx.arc(fieldCenterX, fieldCenterY, fieldRadius, 0, 2 * Math.PI);&amp;#10;ctx.fill();&amp;#10;&amp;#10;// 绘制 dot&amp;#10;dot.draw(ctx);&amp;#10;&amp;#10;// 实验结束控制&amp;#10;if (envelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="Noiseonedot" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="var_3phase360" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class Dot {&amp;#10;  constructor(x, y, radius, speed, direction) {&amp;#10;    this.x = x;&amp;#10;    this.y = y;&amp;#10;    this.radius = radius;&amp;#10;    this.speed = speed;&amp;#10;    this.theta = Math.random() * 2 * Math.PI;&amp;#10;    this.fixedDir = direction;&amp;#10;  }&amp;#10;&amp;#10;  updateDirection(dt, mode) {&amp;#10;    if (mode === &quot;coherent&quot;) {&amp;#10;      this.move(this.fixedDir, dt);&amp;#10;    } else {&amp;#10;      this.theta += (Math.random() - 0.5) * 0.3; // 可调噪声方向偏移幅度&amp;#10;      this.move(this.theta, dt);&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  move(theta, dt) {&amp;#10;    this.x += this.speed * dt * Math.cos(theta);&amp;#10;    this.y += this.speed * dt * Math.sin(theta);&amp;#10;    const dx = this.x - fieldCenterX;&amp;#10;    const dy = this.y - fieldCenterY;&amp;#10;    const dist2 = dx * dx + dy * dy;&amp;#10;    if (dist2 &gt; fieldRadius * fieldRadius) {&amp;#10;      const angle = Math.atan2(dy, dx) + Math.PI;&amp;#10;      const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;      this.x = fieldCenterX + r * Math.cos(angle);&amp;#10;      this.y = fieldCenterY + r * Math.sin(angle);&amp;#10;      this.theta = Math.random() * 2 * Math.PI;&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  draw(ctx) {&amp;#10;    ctx.beginPath();&amp;#10;    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);&amp;#10;    ctx.fillStyle = &quot;white&quot;;&amp;#10;    ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class RampEnvelope {&amp;#10;  constructor(start = 0.0, peak = 0.7, pre = 200, rampUp = 60, plateau = 800, rampDown = 60, post = 200) {&amp;#10;    this.start = start;&amp;#10;    this.peak = peak;&amp;#10;    this.t1 = pre;&amp;#10;    this.t2 = pre + rampUp;&amp;#10;    this.t3 = this.t2 + plateau;&amp;#10;    this.t4 = this.t3 + rampDown;&amp;#10;    this.t5 = this.t4 + post;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(t) {&amp;#10;    if (t &lt; this.t1) return this.start;&amp;#10;    if (t &lt; this.t2) return this.start + (this.peak - this.start) * ((t - this.t1) / (this.t2 - this.t1));&amp;#10;    if (t &lt; this.t3) return this.peak;&amp;#10;    if (t &lt; this.t4) return this.peak - (this.peak - this.start) * ((t - this.t3) / (this.t4 - this.t3));&amp;#10;    return this.start;&amp;#10;  }&amp;#10;&amp;#10;  isFinished(t) {&amp;#10;    return t &gt;= this.t5;&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;fieldCenterX = window.innerWidth / 2;&amp;#10;fieldCenterY = window.innerHeight / 2;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;dotSpeed = 1.75 * cm_to_px_x;&amp;#10;direction = trial_direction * Math.PI / 180;&amp;#10;numDots = 360;&amp;#10;let coh = parseFloat(Coherence1);&amp;#10;&amp;#10;// 初始化 dot 阵列&amp;#10;dots = [];&amp;#10;for (let i = 0; i &lt; numDots; i++) {&amp;#10;  const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;  const a = Math.random() * 2 * Math.PI;&amp;#10;  const x = fieldCenterX + r * Math.cos(a);&amp;#10;  const y = fieldCenterY + r * Math.sin(a);&amp;#10;  dots.push(new Dot(x, y, dotRadius, dotSpeed, direction));&amp;#10;}&amp;#10;&amp;#10;// coherence 包络（五阶段）&amp;#10;globalEnvelope = new RampEnvelope(0, coh, 200, 60, 800, 60, 200);&amp;#10;&amp;#10;// 创建 Canvas&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// 启动计时&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const dt = 1 / 60;&amp;#10;&amp;#10;const coherence = globalEnvelope.getCoherence(elapsed);&amp;#10;const numCoherent = Math.floor(coherence * dots.length);&amp;#10;&amp;#10;// 清空背景 &amp; 画灰色区域&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;ctx.fillStyle = &quot;#888&quot;;&amp;#10;ctx.beginPath();&amp;#10;ctx.arc(fieldCenterX, fieldCenterY, fieldRadius, 0, 2 * Math.PI);&amp;#10;ctx.fill();&amp;#10;&amp;#10;// 随机打乱 dot 顺序（避免同一批点总是 signal）&amp;#10;const shuffled = dots.slice();&amp;#10;for (let i = shuffled.length - 1; i &gt; 0; i--) {&amp;#10;  const j = Math.floor(Math.random() * (i + 1));&amp;#10;  [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];&amp;#10;}&amp;#10;&amp;#10;// 更新和绘制每个点&amp;#10;for (let i = 0; i &lt; shuffled.length; i++) {&amp;#10;  const mode = (i &lt; numCoherent) ? &quot;coherent&quot; : &quot;random&quot;;&amp;#10;  shuffled[i].updateDirection(dt, mode);&amp;#10;  shuffled[i].draw(ctx);&amp;#10;}&amp;#10;&amp;#10;// 自动结束&amp;#10;if (globalEnvelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="var_3phase360" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="Dot_1" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class Dot {&amp;#10;  constructor(x, y, radius, speed, direction) {&amp;#10;    this.x = x;&amp;#10;    this.y = y;&amp;#10;    this.radius = radius;&amp;#10;    this.speed = speed;&amp;#10;    this.mode = &quot;noise&quot;;  // 默认值&amp;#10;&amp;#10;    //const blend = 0.1;  // 插值权重，越小越平滑&amp;#10;    //this.theta = (1 - blend) * this.theta + blend * this.fixedDir;&amp;#10;      &amp;#10;   // const noiseScale = 0.3;&amp;#10;    //this.theta += (Math.random() - 0.5) * noiseScale;&amp;#10;    this.theta = Math.random() * 2 * Math.PI;&amp;#10;    this.fixedDir = direction;  // coherent motion direction&amp;#10;    this.noiseBias = (Math.random() - 0.5) * Math.PI;  // ±90° 偏置&amp;#10;    //this.maxLife = 180+ Math.floor(Math.random() *20);  // 30–90 帧寿命&amp;#10;    this.life = Math.floor(Math.random() * this.maxLife);  // 随机 phase&amp;#10;  }&amp;#10;&amp;#10;updateDirection(dt) {&amp;#10;  if (this.mode === &quot;coherent&quot;) {&amp;#10;    this.move(this.fixedDir, dt);&amp;#10;  } else {&amp;#10;   this.theta = Math.random() * 2 * Math.PI;&amp;#10;this.move(this.theta, dt);&amp;#10;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;  move(theta, dt) {&amp;#10;    this.x += this.speed * dt * Math.cos(theta);&amp;#10;    this.y += this.speed * dt * Math.sin(theta);&amp;#10;&amp;#10;    // ⭕ Wrap：点超出边界则从对侧重新进入&amp;#10;    const dx = this.x - fieldCenterX;&amp;#10;    const dy = this.y - fieldCenterY;&amp;#10;    if (dx * dx + dy * dy &gt; fieldRadius * fieldRadius) {&amp;#10;      const angle = Math.atan2(dy, dx) + Math.PI;&amp;#10;      const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;      this.x = fieldCenterX + r * Math.cos(angle);&amp;#10;      this.y = fieldCenterY + r * Math.sin(angle);&amp;#10;      this.theta = Math.random() * 2 * Math.PI;&amp;#10;    }&amp;#10;&amp;#10;    // 🧬 Dot life 机制：过期后自动重生&amp;#10;    this.life -= 1;&amp;#10;    if (this.life &lt;= 0) {&amp;#10;      const angle = Math.random() * 2 * Math.PI;&amp;#10;      const r = fieldRadius * Math.sqrt(Math.random());&amp;#10;      this.x = fieldCenterX + r * Math.cos(angle);&amp;#10;      this.y = fieldCenterY + r * Math.sin(angle);&amp;#10;      this.theta = Math.random() * 2 * Math.PI;&amp;#10;      this.life = this.maxLife;&amp;#10;      this.noiseBias = (Math.random() - 0.5) * Math.PI;  // 重新随机化个体偏置&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  draw(ctx) {&amp;#10;    ctx.beginPath();&amp;#10;    ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);&amp;#10;    ctx.fillStyle = &quot;white&quot;;&amp;#10;    ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;class RampEnvelope {&amp;#10;  constructor(start = 0.0, peak = 0.7, pre = 200, rampUp = 60, plateau = 800, rampDown = 60, post = 200) {&amp;#10;    this.start = start;&amp;#10;    this.peak = peak;&amp;#10;    this.t1 = pre;&amp;#10;    this.t2 = this.t1 + rampUp;&amp;#10;    this.t3 = this.t2 + plateau;&amp;#10;    this.t4 = this.t3 + rampDown;&amp;#10;    this.t5 = this.t4 + post;&amp;#10;  }&amp;#10;&amp;#10;  getCoherence(t) {&amp;#10;    if (t &lt; this.t1) return this.start;&amp;#10;    if (t &lt; this.t2) return this.start + (this.peak - this.start) * ((t - this.t1) / (this.t2 - this.t1));&amp;#10;    if (t &lt; this.t3) return this.peak;&amp;#10;    if (t &lt; this.t4) return this.peak - (this.peak - this.start) * ((t - this.t3) / (this.t4 - this.t3));&amp;#10;    return this.start;&amp;#10;  }&amp;#10;   getSpeedFactor(t) {&amp;#10;  const coh = this.getCoherence(t);  // 利用已有函数&amp;#10;  // 假设 plateau 区间用 full speed = 1.0&amp;#10;  // ramp 阶段逐渐从 0.6 ~ 1.0&amp;#10;  if (coh &lt;= 0.1) return 1;&amp;#10;  return 0.8 + 0.2 * (coh / this.peak) ;  // [0.6 ~ 1.0]0.8 + 0.2 * (coh / this.peak)&amp;#10;}&amp;#10;&amp;#10;  isFinished(t) {&amp;#10;    return t &gt;= this.t5;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;function getPerceptualSpeed(baseSpeed, coherence) {&amp;#10;  const scale = 1   ;  // 0.3 → 1.04, 0.7 → 0.96&amp;#10;  return baseSpeed * scale;&amp;#10;} &amp;#10;function assignDotModes(dots, coherence) {&amp;#10;  const nSignal = Math.round(dots.length * coherence);&amp;#10;  const indices = [...Array(dots.length).keys()];&amp;#10;  for (let i = indices.length - 1; i &gt; 0; i--) {&amp;#10;    const j = Math.floor(Math.random() * (i + 1));&amp;#10;    [indices[i], indices[j]] = [indices[j], indices[i]];&amp;#10;  }&amp;#10;  const signalIndices = indices.slice(0, nSignal);&amp;#10;&amp;#10;  for (let i = 0; i &lt; dots.length; i++) {&amp;#10;    dots[i].mode = signalIndices.includes(i) ? &quot;coherent&quot; : &quot;noise&quot;;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;function perceptualSpeedCompensation(baseSpeed, coherence) {&amp;#10;  const k = 0.7;  // 补偿因子&amp;#10;  if (coherence &lt;= 0.1) {&amp;#10;    return baseSpeed;  // coherence 太低，不补偿&amp;#10;  } else {&amp;#10;    return baseSpeed * (1 + k * (0.7 - coherence));&amp;#10;    // coherence=0.7 → 无补偿，coherence=0.3 → 有补偿&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="let cm_to_px_x = psychoJS.window.size[0] * x_scale;&amp;#10;fieldRadius = 3.5 * cm_to_px_x;&amp;#10;fieldCenterX = window.innerWidth / 2;&amp;#10;fieldCenterY = window.innerHeight / 2;&amp;#10;dotRadius = 0.03 * cm_to_px_x;&amp;#10;dotSpeed = 2 * cm_to_px_x;&amp;#10;direction = trial_direction * Math.PI / 180;&amp;#10;numDots = 360;&amp;#10;let coh =parseFloat(Coherence1);// &amp;#10;&amp;#10;let rampDur = (coh === 0.3) ? 60 : (coh === 0.7 ? 30 : 45);&amp;#10;let timeDur = parseFloat(TimeDur) * 1000 - rampDur;&amp;#10;// 创建 dot 阵列&amp;#10;dots = [];&amp;#10;for (let i = 0; i &lt; numDots; i++) {&amp;#10;  const r = Math.sqrt(Math.random()) * fieldRadius;&amp;#10;  const a = Math.random() * 2 * Math.PI;&amp;#10;  const x = fieldCenterX + r * Math.cos(a);&amp;#10;  const y = fieldCenterY + r * Math.sin(a);&amp;#10;  dots.push(new Dot(x, y, dotRadius, dotSpeed, direction));&amp;#10;}&amp;#10;&amp;#10;// coherence 包络结构&amp;#10;globalEnvelope = new RampEnvelope(0, coh, 500, rampDur, timeDur, rampDur, 500);&amp;#10;&amp;#10;// Canvas 初始化（仅一次）&amp;#10;if (!window.rdkCanvas) {&amp;#10;  const canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.top = &quot;0&quot;;&amp;#10;  canvas.style.left = &quot;0&quot;;&amp;#10;  canvas.style.zIndex = &quot;1000&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;  window.rdkCanvas = canvas;&amp;#10;  window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;}&amp;#10;canvas = window.rdkCanvas;&amp;#10;ctx = window.ctx;&amp;#10;&amp;#10;// 启动计时器&amp;#10;startTime = performance.now();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="const now = performance.now();&amp;#10;const elapsed = now - startTime;&amp;#10;const dt = 1 / 60;&amp;#10;let coh = parseFloat(Coherence1);&amp;#10;const coherence = globalEnvelope.getCoherence(elapsed);&amp;#10;const speedFactor = globalEnvelope.getSpeedFactor(elapsed);&amp;#10;const adjustedSpeed = dotSpeed * speedFactor;&amp;#10;&amp;#10;// ⬇️ 每帧统一分配 coherent / noise 点（避免每个点独立随机）&amp;#10;assignDotModes(dots, coherence);&amp;#10;&amp;#10;// 清空画布（透明）&amp;#10;ctx.clearRect(0, 0, canvas.width, canvas.height);&amp;#10;&amp;#10;let totalSpeed = 0;&amp;#10;let validDots = 0;&amp;#10;&amp;#10;for (let i = 0; i &lt; dots.length; i++) {&amp;#10;  const prevX = dots[i].x;&amp;#10;  const prevY = dots[i].y;&amp;#10; //dots[i].speed = dotSpeed;  // 所有点速度一致 dots[i].speed = adjustedSpeed;&amp;#10; const compensatedSpeed = perceptualSpeedCompensation(dotSpeed, coherence);&amp;#10; dots[i].speed = compensatedSpeed;&amp;#10;&amp;#10; &amp;#10;  dots[i].updateDirection(dt);  // ✅ 只用 dot 自带的 this.mode 属性&amp;#10;  dots[i].draw(ctx);&amp;#10;&amp;#10;  const dx = dots[i].x - prevX;&amp;#10;  const dy = dots[i].y - prevY;&amp;#10;  const dist = Math.sqrt(dx * dx + dy * dy);&amp;#10;  if (dist &lt; fieldRadius * 0.5) {&amp;#10;    totalSpeed += dist / dt;&amp;#10;    validDots += 1;&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;const avgSpeed = validDots &gt; 0 ? totalSpeed / validDots : 0;&amp;#10;&amp;#10;console.log(`t=${elapsed.toFixed(0)}ms | coh=${coherence.toFixed(2)} | avgSpeed=${avgSpeed.toFixed(2)} px/s`);&amp;#10;&amp;#10;if (globalEnvelope.isFinished(elapsed)) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (window.rdkCanvas) {&amp;#10;  window.rdkCanvas.remove();&amp;#10;  window.rdkCanvas = null;&amp;#10;  window.rdk = null;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Dot_1" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Test">
      <RoutineSettingsComponent name="Test" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Test" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_3" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="class RDKEnvelope {&amp;#10;  constructor({&amp;#10;    canvasId = &quot;rdkCanvas&quot;,&amp;#10;    coherence = 0.7,&amp;#10;    direction = 0,&amp;#10;    timeDur = 1200,&amp;#10;    dotSize = 2,&amp;#10;    fieldRadius = 200,&amp;#10;    speed = 3.5,&amp;#10;    totalDots = 360,&amp;#10;    noiseMode = &quot;inertial&quot;,&amp;#10;    fps = 120&amp;#10;  }) {&amp;#10;    this.coherence = coherence;&amp;#10;    this.direction = direction;&amp;#10;    this.timeDur = timeDur;&amp;#10;    this.dotSize = dotSize;&amp;#10;    this.fieldRadius = fieldRadius;&amp;#10;    this.speed = speed;&amp;#10;    this.totalDots = totalDots;&amp;#10;    this.noiseMode = noiseMode;&amp;#10;    this.fps = fps;&amp;#10;&amp;#10;    // envelope 时间段设置&amp;#10;    this.rampDur = coherence === 0.3 ? 60 : 30;&amp;#10;    this.plateauDur = timeDur - 2 * this.rampDur;&amp;#10;&amp;#10;    // 创建 canvas&amp;#10;    this.canvas = document.getElementById(canvasId);&amp;#10;    if (!this.canvas) {&amp;#10;      this.canvas = document.createElement(&quot;canvas&quot;);&amp;#10;      this.canvas.id = canvasId;&amp;#10;      this.canvas.width = window.innerWidth;&amp;#10;      this.canvas.height = window.innerHeight;&amp;#10;      this.canvas.style.position = &quot;absolute&quot;;&amp;#10;      this.canvas.style.left = &quot;0&quot;;&amp;#10;      this.canvas.style.top = &quot;0&quot;;&amp;#10;      this.canvas.style.zIndex = &quot;1000&quot;;&amp;#10;      document.body.appendChild(this.canvas);&amp;#10;    }&amp;#10;&amp;#10;    this.ctx = this.canvas.getContext(&quot;2d&quot;);&amp;#10;    this.centerX = this.canvas.width / 2;&amp;#10;    this.centerY = this.canvas.height / 2;&amp;#10;&amp;#10;    // 初始化点池&amp;#10;    this.signalDots = this.shuffleArray(Array.from({ length: totalDots }, () =&gt; {&amp;#10;      const dot = this.randomDot();&amp;#10;      dot.visible = false;&amp;#10;      return dot;&amp;#10;    }));&amp;#10;&amp;#10;    this.noiseDots = this.shuffleArray(Array.from({ length: totalDots }, () =&gt; {&amp;#10;      const dot = this.randomDot(true);&amp;#10;      dot.visible = false;&amp;#10;      return dot;&amp;#10;    }));&amp;#10;  }&amp;#10;&amp;#10;  randomDot(withTheta = false) {&amp;#10;    const angle = 2 * Math.PI * Math.random();&amp;#10;    const radius = this.fieldRadius * Math.sqrt(Math.random());&amp;#10;    const dot = {&amp;#10;      x: this.centerX + radius * Math.cos(angle),&amp;#10;      y: this.centerY + radius * Math.sin(angle)&amp;#10;    };&amp;#10;    if (withTheta) {&amp;#10;      dot.theta = 2 * Math.PI * Math.random();&amp;#10;    }&amp;#10;    return dot;&amp;#10;  }&amp;#10;&amp;#10;  shuffleArray(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;      const j = Math.floor(Math.random() * (i + 1));&amp;#10;      [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array;&amp;#10;  }&amp;#10;&amp;#10;  updateAndDraw(tNow) {&amp;#10;    // coherence envelope&amp;#10;    let coh = 0;&amp;#10;    const { rampDur, plateauDur, timeDur } = this;&amp;#10;&amp;#10;    if (tNow &lt; rampDur) {&amp;#10;      coh = this.coherence * (tNow / rampDur);&amp;#10;    } else if (tNow &lt; rampDur + plateauDur) {&amp;#10;      coh = this.coherence;&amp;#10;    } else if (tNow &lt; timeDur) {&amp;#10;      coh = this.coherence * (1 - ((tNow - rampDur - plateauDur) / rampDur));&amp;#10;    } else {&amp;#10;      this.clear();&amp;#10;      return false;&amp;#10;    }&amp;#10;&amp;#10;    // 更新可见状态：前 N 个 visible，其余 false&amp;#10;    const nSigVisible = Math.round(this.totalDots * coh);&amp;#10;    const nNoiseVisible = this.totalDots - nSigVisible;&amp;#10;&amp;#10;    this.signalDots.forEach((dot, i) =&gt; {&amp;#10;      dot.visible = i &lt; nSigVisible;&amp;#10;    });&amp;#10;&amp;#10;    this.noiseDots.forEach((dot, i) =&gt; {&amp;#10;      dot.visible = i &lt; nNoiseVisible;&amp;#10;    });&amp;#10;&amp;#10;    // 绘图&amp;#10;    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);&amp;#10;    this.drawSignal();&amp;#10;    this.drawNoise();&amp;#10;&amp;#10;    console.log(`[RDK] t=${tNow.toFixed(1)}ms | coh=${coh.toFixed(2)} | signal=${nSigVisible} | noise=${nNoiseVisible}`);&amp;#10;    return true;&amp;#10;  }&amp;#10;&amp;#10;  drawSignal() {&amp;#10;    const dx = this.speed * Math.cos(this.direction * Math.PI / 180);&amp;#10;    const dy = this.speed * Math.sin(this.direction * Math.PI / 180);&amp;#10;&amp;#10;    for (let d of this.signalDots) {&amp;#10;      if (!d.visible) continue;&amp;#10;&amp;#10;      d.x += dx;&amp;#10;      d.y += dy;&amp;#10;&amp;#10;      const dist = Math.hypot(d.x - this.centerX, d.y - this.centerY);&amp;#10;      if (dist &gt; this.fieldRadius) {&amp;#10;        Object.assign(d, this.randomDot(), { visible: d.visible });&amp;#10;      }&amp;#10;&amp;#10;      this.ctx.beginPath();&amp;#10;      this.ctx.arc(d.x, d.y, this.dotSize, 0, 2 * Math.PI);&amp;#10;      this.ctx.fillStyle = &quot;white&quot;;&amp;#10;      this.ctx.fill();&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  drawNoise() {&amp;#10;    for (let d of this.noiseDots) {&amp;#10;      if (!d.visible) continue;&amp;#10;&amp;#10;      if (this.noiseMode === &quot;walk&quot;) {&amp;#10;        d.theta = 2 * Math.PI * Math.random();&amp;#10;      }&amp;#10;&amp;#10;      if (this.noiseMode === &quot;replace&quot;) {&amp;#10;        Object.assign(d, this.randomDot(true), { visible: d.visible });&amp;#10;      } else {&amp;#10;        d.x += this.speed * Math.cos(d.theta);&amp;#10;        d.y += this.speed * Math.sin(d.theta);&amp;#10;      }&amp;#10;&amp;#10;      const dist = Math.hypot(d.x - this.centerX, d.y - this.centerY);&amp;#10;      if (dist &gt; this.fieldRadius) {&amp;#10;        Object.assign(d, this.randomDot(true), { visible: d.visible });&amp;#10;      }&amp;#10;&amp;#10;      this.ctx.beginPath();&amp;#10;      this.ctx.arc(d.x, d.y, this.dotSize, 0, 2 * Math.PI);&amp;#10;      this.ctx.fillStyle = &quot;white&quot;;&amp;#10;      this.ctx.fill();&amp;#10;    }&amp;#10;  }&amp;#10;&amp;#10;  clear() {&amp;#10;    if (this.canvas &amp;&amp; this.canvas.parentNode) {&amp;#10;      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);&amp;#10;      this.canvas.remove();&amp;#10;    }&amp;#10;  }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// === 全局参数设置 ===&amp;#10;window.rampStartTime = performance.now();  // 起始时间&amp;#10;window.rampDuration = 30;                 // ramp-up 持续时间 (ms)&amp;#10;window.coherenceTarget = 0.7;             // 目标 coherence&amp;#10;window.totalDots = 360;&amp;#10;window.dotSize = 2;&amp;#10;window.fieldRadius = 150;&amp;#10;window.direction = 90;                    // 向上&amp;#10;window.speed = 1.0;&amp;#10;window.centerX = window.innerWidth / 2;&amp;#10;window.centerY = window.innerHeight / 2;&amp;#10;&amp;#10;// === 创建 canvas ===&amp;#10;let canvas = document.getElementById(&quot;rampCanvas&quot;);&amp;#10;if (!canvas) {&amp;#10;  canvas = document.createElement(&quot;canvas&quot;);&amp;#10;  canvas.id = &quot;rampCanvas&quot;;&amp;#10;  canvas.width = window.innerWidth;&amp;#10;  canvas.height = window.innerHeight;&amp;#10;  canvas.style.position = &quot;absolute&quot;;&amp;#10;  canvas.style.zIndex = &quot;999&quot;;&amp;#10;  document.body.appendChild(canvas);&amp;#10;}&amp;#10;window.canvas = canvas;&amp;#10;window.ctx = canvas.getContext(&quot;2d&quot;);&amp;#10;&amp;#10;// === 随机 dot 函数 ===&amp;#10;function randomDot(withTheta = false) {&amp;#10;  const angle = 2 * Math.PI * Math.random();&amp;#10;  const radius = window.fieldRadius * Math.sqrt(Math.random());&amp;#10;  const dot = {&amp;#10;    x: window.centerX + radius * Math.cos(angle),&amp;#10;    y: window.centerY + radius * Math.sin(angle)&amp;#10;  };&amp;#10;  if (withTheta) {&amp;#10;    dot.theta = 2 * Math.PI * Math.random();&amp;#10;  }&amp;#10;  return dot;&amp;#10;}&amp;#10;window.randomDot = randomDot;&amp;#10;&amp;#10;// === 初始化 dots ===&amp;#10;window.signalDots = Array.from({ length: window.totalDots }, () =&gt; randomDot());&amp;#10;window.noiseDots = Array.from({ length: window.totalDots }, () =&gt; randomDot(true));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="let tNow = performance.now() - window.rampStartTime;&amp;#10;let coh = Math.min(1, tNow / window.rampDuration) * window.coherenceTarget;&amp;#10;&amp;#10;let nSignal = Math.round(window.totalDots * coh);&amp;#10;let nNoise = window.totalDots - nSignal;&amp;#10;&amp;#10;window.ctx.clearRect(0, 0, window.canvas.width, window.canvas.height);&amp;#10;&amp;#10;// === 绘制 signal 点 ===&amp;#10;for (let i = 0; i &lt; window.signalDots.length; i++) {&amp;#10;  let d = window.signalDots[i];&amp;#10;  if (i &lt; nSignal) {&amp;#10;    d.x += window.speed * Math.cos(window.direction * Math.PI / 180);&amp;#10;    d.y += window.speed * Math.sin(window.direction * Math.PI / 180);&amp;#10;    const dist = Math.hypot(d.x - window.centerX, d.y - window.centerY);&amp;#10;    if (dist &gt; window.fieldRadius) Object.assign(d, window.randomDot());&amp;#10;    window.ctx.beginPath();&amp;#10;    window.ctx.arc(d.x, d.y, window.dotSize, 0, 2 * Math.PI);&amp;#10;    window.ctx.fillStyle = &quot;white&quot;;&amp;#10;    window.ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;// === 绘制 noise 点 ===&amp;#10;for (let i = 0; i &lt; window.noiseDots.length; i++) {&amp;#10;  let d = window.noiseDots[i];&amp;#10;  if (i &lt; nNoise) {&amp;#10;    d.x += window.speed * Math.cos(d.theta);&amp;#10;    d.y += window.speed * Math.sin(d.theta);&amp;#10;    const dist = Math.hypot(d.x - window.centerX, d.y - window.centerY);&amp;#10;    if (dist &gt; window.fieldRadius) Object.assign(d, window.randomDot(true));&amp;#10;    window.ctx.beginPath();&amp;#10;    window.ctx.arc(d.x, d.y, window.dotSize, 0, 2 * Math.PI);&amp;#10;    window.ctx.fillStyle = &quot;lightblue&quot;;&amp;#10;    window.ctx.fill();&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;console.log(`[rampTest] t=${tNow.toFixed(1)}ms | coh=${coh.toFixed(2)} | signal=${nSignal} | noise=${nNoise}`);&amp;#10;&amp;#10;if (tNow &gt; window.rampDuration) {&amp;#10;  continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="let canvas = document.getElementById(&quot;rampCanvas&quot;);&amp;#10;if (canvas) {&amp;#10;  canvas.getContext(&quot;2d&quot;).clearRect(0, 0, canvas.width, canvas.height);&amp;#10;  canvas.remove();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Scale_setup"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="show_keys" valType="num"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="screen_scale_keys"/>
    <Routine name="rectangel_keys"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="Intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.3), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 0.8), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.0), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.2), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.4), ('Coherence1', 0.7), ('TrialType', 'Time')]), OrderedDict([('TimeDur', 1.6), ('Coherence1', 0.7), ('TrialType', 'Time')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="condition.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="9" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block"/>
    <Routine name="ITI"/>
    <Routine name="Mask_2"/>
    <Routine name="encoding"/>
    <Routine name="Mask_2"/>
    <Routine name="ITI"/>
    <Routine name="Cue"/>
    <Routine name="Response"/>
    <Routine name="Feedback_Time"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
